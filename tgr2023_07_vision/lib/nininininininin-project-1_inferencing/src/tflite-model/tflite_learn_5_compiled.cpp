/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 24.11.2023 00:33:59

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 368208;
#else
constexpr int kTensorArenaSize = 367184;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,120,120,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[13] = { 5356, -18299, -15643, -14402, -17509, -17166, -18320, -22057, -16731, -17432, -20320, -15462, -17207, };
const TfArray<1, int> tensor_dimension2 = { 1, { 13 } };
const TfArray<13, float> quant2_scale = { 13, { 0.0010778069263324142, 0.00043657870264723897, 0.00050256127724424005, 0.00055120425531640649, 0.00044529454316943884, 0.00045368549763225019, 0.000440728705143556, 0.00035899053909815848, 0.00047371708205901086, 0.00044725637417286634, 0.00037292781053110957, 0.0005095235537737608, 0.00044967859867028892, } };
const TfArray<13, int> quant2_zero = { 13, { 0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[13*1*1*32] = { 
  /* [0][0][][] */ 16,-10,13,-24,-17,32,-2,-4,-11,-24,25,21,-37,-3,3,-8,-24,9,20,-10,15,18,-28,-12,8,-29,-34,-5,-33,34,127,-19, 
  /* [1][0][][] */ 37,59,19,88,-32,15,-89,50,62,-3,15,-76,82,9,56,-70,3,-32,-51,-127,-21,52,-43,27,10,-69,-83,-20,62,-79,-55,14, 
  /* [2][0][][] */ -12,9,-29,-49,46,68,-102,-3,61,55,19,32,-56,-26,38,27,53,-7,-8,-127,1,71,30,-4,20,12,-11,-60,60,53,-79,13, 
  /* [3][0][][] */ 36,69,-9,-12,0,-36,-62,-15,-52,10,-14,-65,-53,-16,-36,-56,-5,-84,35,-31,34,76,19,70,34,-11,-3,34,36,44,-127,-7, 
  /* [4][0][][] */ -32,-34,32,23,11,-83,-1,-34,25,-13,-116,-33,-1,37,-57,39,32,-127,-72,64,77,45,-20,-77,-28,-56,27,-17,27,32,-56,8, 
  /* [5][0][][] */ 68,-13,24,56,79,61,-67,28,-29,33,-127,34,-6,6,72,-54,59,-56,37,64,42,-2,-19,-61,-17,48,-35,-30,47,-33,-86,33, 
  /* [6][0][][] */ 89,5,86,26,-56,-47,32,18,-49,13,31,-10,25,10,-70,34,-10,-103,-6,-46,-36,-28,-43,-34,68,46,73,-70,41,-3,-127,-7, 
  /* [7][0][][] */ -45,-16,-52,-39,-83,-88,-88,28,79,-20,-30,5,6,40,81,-99,-40,-71,-33,79,99,-17,-127,22,64,35,89,-115,-25,63,-111,-55, 
  /* [8][0][][] */ -60,28,-70,72,-5,29,13,71,59,-25,-27,35,-9,-13,11,-70,-7,-95,-61,33,15,29,-57,-48,25,48,64,-67,6,-14,-127,57, 
  /* [9][0][][] */ -61,3,-32,-38,-68,71,-91,19,-22,43,-43,63,16,-56,-20,-27,13,-105,-38,-67,95,-30,-24,62,-23,-52,32,33,0,31,-127,-10, 
  /* [10][0][][] */ 19,87,-22,55,62,88,-67,-77,-7,31,-94,65,29,33,-29,29,-2,-88,-86,45,-91,101,-93,-36,1,-79,99,0,-20,60,-127,53, 
  /* [11][0][][] */ 45,3,-38,-111,-6,15,-96,-19,-48,51,16,-1,48,-45,16,-44,27,-17,50,-27,51,-24,-26,77,58,3,-61,-106,20,-43,-127,24, 
  /* [12][0][][] */ -19,82,-75,4,13,-28,-80,6,-32,-47,-35,-16,72,-30,74,73,31,-56,-54,-6,0,16,-21,57,40,49,24,-108,-52,69,-127,24, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 13,1,1,32 } };
const TfArray<13, float> quant3_scale = { 13, { 0.010815570130944252, 0.0043809772469103336, 0.0050430987030267715, 0.0055312211625277996, 0.0044684391468763351, 0.0045526404865086079, 0.0044226218014955521, 0.0036023962311446667, 0.0047536534257233143, 0.0044881254434585571, 0.003742253640666604, 0.0051129637286067009, 0.0045124320313334465, } };
const TfArray<13, int> quant3_zero = { 13, { 0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 216, 58, 58, -156, -575, 340, 771, 79, -535, -687, 1377, -57, -6, -220, -301, -510, -497, 1180, -190, 252, 435, 343, -135, 425, 397, -557, 127, 700, -259, 670, 1713, -183, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 7.6865013397764415e-05, 7.5414813181851059e-05, 6.5875770815182477e-05, 6.4370287873316556e-05, 4.4951924792258069e-05, 7.798606384312734e-05, 9.6881325589492917e-05, 6.8145374825689942e-05, 7.8966259025037289e-05, 5.1436119974823669e-05, 8.191348024411127e-05, 3.9793387259123847e-05, 5.8338053349871188e-05, 9.96698800008744e-05, 5.1551724027376622e-05, 4.6274624764919281e-05, 7.3690687713678926e-05, 0.00011080308468081057, 7.972211460582912e-05, 7.4503717769403011e-05, 7.2243768954649568e-05, 5.9744179452536628e-05, 0.00012181216152384877, 6.0203536122571677e-05, 7.5270349043421447e-05, 4.837850428884849e-05, 6.999696051934734e-05, 0.00013013200077693909, 6.7015775130130351e-05, 5.2771909395232797e-05, 0.00016909810074139386, 5.2763189160032198e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -65,-18,65,10,71,-3,-53,-35,48,-88,-68,15,41,-25,6,40,-20,-14,-26,-9,-35,-77,5,81,-72,-34,60,-17,69,10,-20,-46,53,-36,-82,40,-47,-50,-49,39,34,-38,-65,65,45,-65,76,5,16,-18,-10,65,-31,-15,-44,71,-45,54,85,-61,-32,55,2,45,13,8,65,62,35,73,60,-83,68,-85,35,52,-50,43,-34,30,38,22,127,-70,-24,-5,-51,69,-7,84,3,-56,7,47,87,8, 
  /* [1][0][][] */ -21,29,-41,-12,-23,47,20,-6,45,-118,-62,56,38,-27,-29,46,71,-25,-13,75,-67,-34,57,24,-6,-26,-20,69,2,1,52,-35,15,67,-28,-19,40,27,-12,-31,-44,12,-32,-43,-10,19,-15,-19,-28,-89,45,33,7,53,-75,-21,-35,68,47,47,-25,73,-39,-38,-34,25,34,30,57,11,9,-48,-57,82,-20,27,59,-35,-46,55,-53,36,-92,-127,30,78,-64,-35,25,15,54,10,29,34,-60,-34, 
  /* [2][0][][] */ -32,21,-48,62,-25,-19,55,72,-8,35,-33,66,47,-44,99,-78,-51,-21,49,24,-14,-33,23,2,18,45,76,-4,-79,53,35,71,-73,-38,-113,-32,-57,79,74,-11,-74,-50,37,-2,-19,76,-40,-49,76,66,110,-44,-42,30,57,-34,-32,52,-40,-18,-14,38,33,31,68,28,41,56,-63,64,11,-12,19,-80,19,14,-46,-25,18,0,25,-60,60,-6,-9,-73,-54,-24,33,127,-13,-6,-30,-23,85,-18, 
  /* [3][0][][] */ -19,14,28,-22,-24,30,-53,-44,25,-3,41,23,67,15,18,1,79,79,-54,38,43,-109,-31,-58,-72,-83,-60,89,46,-70,53,-3,-2,-28,-2,12,-41,-11,2,49,-15,-39,-127,-1,47,16,-26,-41,66,-62,45,25,71,39,59,-56,-92,-69,-66,-40,-44,43,-29,72,62,-34,-70,-21,-23,-103,-15,21,13,-20,33,-42,33,108,44,-33,-45,-80,-46,4,27,50,-58,-93,-77,12,-42,-74,58,-91,-125,-50, 
  /* [4][0][][] */ 37,85,-11,42,-34,-27,29,11,47,82,-16,43,15,-52,-21,-73,-27,-6,-65,11,96,-101,77,18,-25,-9,52,-66,-60,23,-73,-54,58,98,6,-110,-52,-13,-118,48,-54,-63,-77,-92,33,92,18,40,22,-47,-27,-80,-94,37,-76,12,19,-96,12,4,5,-73,-39,-66,-58,45,-6,-45,17,-91,-107,-85,-62,16,84,46,51,-16,-13,-67,-6,-46,-96,-29,-11,60,76,-3,-121,-75,29,35,22,83,-127,-18, 
  /* [5][0][][] */ 127,-57,46,52,31,-67,33,47,38,-64,20,-34,23,54,9,23,45,41,-43,59,-17,47,12,-10,-101,-19,-14,-50,38,21,17,-44,-16,22,-19,-1,-63,-23,31,21,-41,-39,-9,57,-34,6,13,-21,-67,40,-6,2,29,12,23,-3,70,42,-33,-12,22,-34,30,-29,-28,60,8,21,46,2,51,-63,-25,41,-13,-31,6,-20,-5,52,60,28,27,54,-35,39,0,21,32,-83,61,64,-14,-4,22,-70, 
  /* [6][0][][] */ 24,5,53,55,-54,17,29,36,61,3,21,-46,41,42,99,-51,19,18,12,44,80,-14,61,15,12,7,-6,-13,-17,-48,13,1,-20,-39,0,-32,-4,29,-39,38,127,39,73,1,13,65,-54,-24,-14,78,26,13,25,-22,61,-18,38,-4,-33,59,-28,4,122,-34,-24,58,45,-14,55,52,-21,85,23,-41,-38,21,-33,-48,46,-12,25,12,41,91,-36,-36,15,-30,59,65,55,8,10,-8,123,7, 
  /* [7][0][][] */ 127,60,-16,-11,-43,100,5,6,95,-5,-54,12,59,-31,75,48,49,20,-6,70,42,51,-30,45,-124,49,15,64,-28,86,-25,54,29,51,46,114,-59,52,9,-2,51,-53,-35,50,19,-60,79,-61,57,-44,-102,-37,-17,75,-52,30,123,-47,-2,-32,8,5,122,-72,-39,-3,48,24,-31,7,18,44,60,-71,37,44,-37,27,-62,37,61,-8,-101,-77,65,15,-65,58,51,5,64,53,-36,-24,-70,-127, 
  /* [8][0][][] */ -1,23,-39,-68,59,-1,-8,-20,-7,-13,10,36,-7,-61,-70,-48,-46,70,-45,16,7,-69,48,56,-127,52,9,36,-47,-4,-52,50,46,-19,45,-10,53,-2,-36,44,40,63,-108,-69,-10,-29,-25,48,50,-48,-22,-17,-44,-15,-39,-73,2,51,-73,49,49,17,-12,77,-21,-30,-6,49,-61,20,-34,-13,29,24,-5,-2,-38,83,40,28,9,33,-75,-40,2,13,11,-35,-5,-36,-70,48,-45,-86,-68,-15, 
  /* [9][0][][] */ -17,4,92,21,58,-112,-51,-97,11,17,-8,45,-31,-86,-111,-19,-2,-10,-105,-76,-28,64,-92,-89,48,-32,-13,16,-31,-62,-83,68,24,-13,1,-47,-65,0,-25,-43,27,-57,8,-76,39,12,-91,47,32,-34,-83,-45,61,-66,-77,72,38,-56,-12,-3,-83,85,48,-73,-76,-9,78,35,-47,60,73,-94,2,57,-87,-96,-70,-127,-62,83,17,-4,55,-2,-37,-92,19,-14,75,-1,-35,87,61,-22,38,-60, 
  /* [10][0][][] */ -29,82,55,-20,15,60,85,-2,106,30,37,-37,66,70,61,4,-13,55,17,7,96,79,77,-32,35,54,-70,-38,2,39,-70,-27,72,60,120,88,-16,43,-31,33,7,74,-56,-23,-41,-62,-12,-30,7,118,40,6,36,25,-63,5,-12,-3,6,-10,10,44,70,38,69,-32,-40,-3,31,-9,-24,62,39,67,-43,69,3,79,127,22,55,22,52,88,-56,49,54,-8,71,-7,1,-37,16,-35,26,-16, 
  /* [11][0][][] */ 117,20,-15,109,127,53,57,26,92,93,-79,114,-11,-110,31,-73,-57,-108,69,37,13,61,18,-121,59,-107,-23,80,82,-3,30,-18,-99,-72,48,52,-67,72,-37,-69,-33,113,-80,5,-45,-62,-109,-99,87,100,124,57,-103,-95,15,24,-84,-62,-40,-90,-88,96,89,7,33,101,-74,31,99,54,-109,-79,37,90,-114,53,-72,67,-48,87,-114,-25,-67,-24,46,-90,6,-38,-109,-5,4,-106,-101,-53,-31,-54, 
  /* [12][0][][] */ -80,48,-38,14,65,17,-43,29,-58,-7,1,31,-21,-18,15,-58,-61,-9,-80,-36,-41,-7,50,87,-63,-94,96,-59,76,19,-26,92,-50,-73,-32,20,25,-57,23,53,58,13,-76,-21,-30,-62,-23,106,-14,-123,-34,94,38,9,-64,62,-36,-23,67,42,65,105,-15,38,110,17,-49,77,59,95,85,-48,70,127,-10,-9,-3,47,-106,-52,-29,48,46,-70,-12,30,50,88,-110,-94,55,32,37,-8,-9,-16, 
  /* [13][0][][] */ 42,-28,40,35,37,47,32,21,24,-49,-2,-20,35,25,19,-24,-53,-31,-46,9,7,-14,48,-22,-14,12,-1,6,-42,-42,30,13,15,44,-6,12,-41,-22,6,27,-30,31,-32,3,-20,7,-4,-21,16,38,-17,-48,-49,11,36,-40,-28,9,-16,-35,-17,48,-43,0,-28,-28,-46,35,-20,-17,33,-12,-44,8,-38,-21,-47,127,22,-34,17,-46,20,-8,-41,-46,36,45,-10,-37,-38,20,42,-29,1,-13, 
  /* [14][0][][] */ -57,-84,71,56,61,-31,-19,-98,-92,-25,54,68,-27,-79,-87,-74,-46,-51,-17,18,-61,17,-8,50,-127,-64,-28,20,-98,-106,-69,26,77,-25,-36,-4,76,96,22,-97,-14,-97,5,71,54,-90,51,-72,84,1,59,36,76,-20,-23,8,-61,5,34,80,-20,-73,-82,50,-80,-17,62,-92,-79,-75,-86,71,0,73,39,-67,40,-119,43,26,35,-22,-102,-61,-99,-81,-103,84,81,-18,72,-47,60,74,-80,33, 
  /* [15][0][][] */ 5,-39,-37,59,68,-91,43,-92,74,-18,-71,-9,81,-6,-92,-113,65,-7,-88,-3,71,11,52,82,94,53,29,72,-3,36,56,-101,-15,-7,-81,-21,-83,95,95,-83,13,95,-35,-29,18,-82,-52,-91,-27,-83,-3,13,-104,-117,-56,-30,55,30,-60,91,-58,-73,-10,82,-42,83,-72,-9,-62,13,48,-71,6,-28,44,-111,-21,17,102,48,-80,45,-93,-74,-127,-61,-92,27,75,57,-117,-47,45,101,-98,92, 
  /* [16][0][][] */ -44,0,59,-36,39,71,-26,44,14,-24,-64,49,5,-64,-59,-28,70,63,7,39,13,-1,-38,47,-59,3,-29,37,-62,12,33,11,-66,57,40,22,-16,14,-29,-23,-11,-32,27,64,44,65,77,-2,-8,-127,-4,66,-21,68,47,22,-38,65,42,11,66,71,13,31,40,18,5,64,28,79,-34,-60,29,42,43,50,-6,78,-97,-3,8,-59,57,-72,15,57,38,10,-7,-20,-8,80,-18,-25,-86,-55, 
  /* [17][0][][] */ 37,-23,20,46,25,-50,19,-41,20,44,50,22,53,43,-17,17,11,49,96,84,33,25,80,-12,-2,99,-26,23,60,-20,2,21,27,1,83,20,-14,59,-39,9,29,-7,2,-1,15,-2,45,-45,68,127,50,-3,3,35,42,-3,-44,41,-40,-43,18,-30,17,69,-22,-22,34,-37,-30,5,56,96,7,-8,-22,29,50,38,89,-16,22,20,40,15,-47,37,54,-9,83,36,-34,-38,61,30,67,9, 
  /* [18][0][][] */ -52,50,53,-42,-9,-63,-58,-2,4,68,-60,-32,-25,11,28,-35,7,-16,127,-18,76,-36,8,-47,23,-23,-13,55,6,13,-2,20,15,-19,-68,-71,-24,94,-25,30,-18,-4,-24,-8,-64,5,3,-10,6,90,37,12,-63,-10,-3,40,-19,14,-17,-67,41,54,9,15,-42,-67,-21,44,32,-43,-37,62,-56,10,-52,-59,24,18,4,-47,-35,-8,33,-32,49,-24,41,32,-54,-37,-38,52,45,-31,80,19, 
  /* [19][0][][] */ -45,-8,58,41,3,-46,17,112,47,50,29,18,-61,8,-45,53,46,-83,58,21,-8,26,-40,11,51,-6,50,-51,-62,-46,7,7,23,-66,-5,-31,20,-20,24,-75,31,-63,-8,30,-39,87,61,-44,-70,39,-9,43,2,13,105,-13,-44,64,31,-20,48,-17,75,27,-28,-4,4,3,-1,64,73,-50,-14,-55,-13,-25,-16,-97,25,67,46,-92,12,127,-42,12,-5,29,49,100,24,47,-4,101,46,33, 
  /* [20][0][][] */ 27,38,57,70,-45,67,9,30,14,31,-28,17,2,85,22,-35,-20,-43,-33,-53,24,-9,-127,-44,100,-25,-61,34,30,21,0,83,64,40,-32,74,28,1,0,-89,-40,-15,-86,-65,-25,-40,-34,76,-6,-81,-62,39,35,78,49,4,125,39,64,68,64,-28,-44,-19,-12,-35,-35,18,-39,-68,-50,44,-32,-67,24,24,75,-37,63,69,63,26,-19,-2,49,68,32,38,46,50,30,54,1,28,-47,27, 
  /* [21][0][][] */ 109,65,56,-89,95,-67,80,44,-11,-71,-48,26,-3,-5,-89,-45,-65,-12,-50,-7,20,-122,72,-46,8,-65,-19,53,3,-1,18,-22,-20,29,-81,-127,88,59,-92,-23,-5,38,54,10,-48,-15,-60,84,-19,-108,6,63,36,48,-44,21,-108,48,-24,96,45,-50,6,25,59,25,-5,-32,-93,-2,6,9,34,27,69,55,-75,-30,12,92,7,71,20,-25,37,-56,0,-52,-100,76,85,-79,-44,-62,42,-17, 
  /* [22][0][][] */ 57,6,-26,-40,44,-5,50,-5,-19,77,-22,-37,53,-1,-34,-27,16,40,39,-19,127,-7,24,13,66,49,-47,43,-7,-30,-5,-23,22,53,28,14,-4,25,-39,-39,15,8,-6,30,15,-60,60,-9,1,36,-9,-9,-24,-26,-61,26,32,-12,-9,5,30,-31,-50,-36,-17,24,-30,-8,45,40,-10,87,-20,24,24,-39,12,-5,52,31,32,-21,9,-73,24,37,58,-17,-2,-7,-16,24,19,-5,51,50, 
  /* [23][0][][] */ 76,-61,18,45,62,-71,-21,-109,30,-93,92,62,16,-35,-10,-22,77,-81,-71,44,47,-7,47,-24,86,-30,47,36,78,40,44,-8,-33,36,0,68,79,11,-89,-11,-73,-5,-13,-92,-69,-97,78,35,-14,-86,-97,-16,63,-29,-77,79,32,-17,81,55,-71,-69,-73,-19,24,26,-115,-71,55,-56,89,-107,-5,-2,-26,-59,59,-43,52,100,-33,-30,-127,-115,87,4,113,-29,-34,-27,84,-2,83,-44,-124,83, 
  /* [24][0][][] */ -76,-14,-46,-32,-49,-55,-59,-32,58,-24,50,40,79,34,0,-49,-29,20,-41,-21,63,-46,-24,-8,9,-88,58,54,75,49,-5,-27,-16,7,-9,28,-10,-39,51,7,-58,-44,-15,19,16,-50,41,63,-57,-91,-19,23,52,54,-3,-27,-33,62,33,7,68,11,51,66,-42,64,-10,-37,-39,31,-25,-24,-6,-28,72,68,56,-66,-65,-27,-35,-58,-120,-127,22,52,-17,-42,11,-61,19,-39,-46,28,-117,-18, 
  /* [25][0][][] */ -83,-64,-84,-22,63,-78,-108,44,34,-127,-43,5,48,-7,-99,-32,-78,42,31,-115,60,64,-20,-67,-4,-71,-102,18,45,-95,21,91,59,-114,18,38,69,-63,-26,-30,-82,70,-103,-9,76,31,46,16,-101,60,-77,-12,23,-33,-68,-9,-28,30,-111,55,93,24,46,20,-19,54,-24,-21,-95,-8,-27,-105,17,-82,51,8,49,32,12,2,31,32,-41,67,-82,-55,-99,-87,-28,-40,81,6,-107,-17,-20,-87, 
  /* [26][0][][] */ 66,-65,4,5,-83,13,-22,14,-35,-127,87,67,-38,2,25,10,84,20,-75,-47,-2,64,74,8,11,9,24,36,8,24,-41,21,-39,-22,-91,-66,-33,42,5,63,-67,61,31,37,-46,69,-10,79,-1,-49,-9,72,18,-16,4,-63,69,44,50,35,12,-47,50,-27,77,8,-34,45,-33,55,65,52,65,-98,-38,20,40,-126,-72,19,-5,42,-13,-55,65,8,0,29,-64,96,26,22,-38,101,-12,47, 
  /* [27][0][][] */ 48,11,-15,-28,-20,-12,23,-20,31,89,37,-33,-10,35,27,-9,19,8,48,-19,34,12,15,-7,3,75,-41,1,25,8,18,7,40,39,-15,-25,-29,-15,-42,27,46,34,75,10,48,44,20,31,50,127,68,-14,-20,-26,34,-1,60,-12,-31,-12,-14,-14,-15,46,15,-5,-45,40,11,9,-31,79,19,4,-1,-18,16,-11,93,31,36,26,118,51,-26,-18,33,12,46,6,-6,-8,68,7,92,66, 
  /* [28][0][][] */ 72,27,68,15,-23,-35,-22,-54,0,-117,34,52,-47,-66,-16,76,68,92,-46,52,0,-42,-95,-31,-26,24,-62,-20,-35,-42,11,-14,-27,36,36,62,19,-86,-58,33,44,68,-22,32,-29,8,15,41,54,-68,-33,-1,-45,30,39,36,44,-11,56,58,-4,-26,-84,40,54,58,-12,69,-61,-2,-127,-90,47,-6,4,-64,-61,3,-58,36,-38,-29,96,-13,49,-51,53,-55,-92,-15,-22,-26,-79,27,-74,-58, 
  /* [29][0][][] */ 57,38,47,-41,-61,8,-96,8,74,-13,-68,-77,88,-73,-68,-22,-75,83,29,-51,-78,-57,57,13,-31,22,-12,-32,-87,-3,111,1,-10,4,-84,-49,-4,111,2,73,59,91,-55,83,17,92,-36,-7,12,-40,71,-80,61,-84,107,39,-106,55,-33,86,-89,85,-120,-32,-46,-50,67,83,74,-61,31,-7,103,127,65,27,100,-100,-36,36,-5,-75,-99,-91,65,98,27,69,-17,54,70,60,-97,21,-63,80, 
  /* [30][0][][] */ 21,4,-18,16,-7,-6,37,-1,53,36,34,-24,-25,15,26,-1,-17,23,105,-14,81,-6,-11,-2,-15,89,-13,27,7,-29,-5,-1,11,-5,9,-9,-7,24,5,1,127,-12,19,30,37,0,14,6,-29,89,58,-40,26,-22,14,26,15,-11,-27,-18,-33,-4,6,23,-24,-13,-20,24,-14,35,22,83,-23,46,13,-7,-20,-17,101,-21,20,33,11,18,-35,4,80,18,61,-17,24,7,40,-6,40,-7, 
  /* [31][0][][] */ 127,-73,39,88,20,54,-48,-28,-12,-67,-39,-66,93,-102,-63,106,-33,-74,-18,29,15,28,3,92,-22,-99,33,39,-67,-50,46,100,16,39,-69,-66,86,-29,-22,-91,42,-60,-19,46,-18,-11,-20,30,27,-49,45,-25,-82,-42,-56,20,-125,70,21,110,-23,5,125,-66,47,109,-27,-55,71,-80,-83,-78,-63,-38,14,19,-44,-79,19,88,-60,-52,43,49,64,80,-94,35,-11,-25,-62,-27,-1,80,-59,-62, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0032667629420757294, 0.0032051294110715389, 0.0027997202705591917, 0.0027357372455298901, 0.0019104568054899573, 0.003314407542347908, 0.0041174562647938728, 0.0028961785137653351, 0.0033560660667717457, 0.0021860350389033556, 0.0034813228994607925, 0.0016912189312279224, 0.0024793671909719706, 0.0042359698563814163, 0.0021909482311457396, 0.0019666715525090694, 0.0031318541150540113, 0.004709131084382534, 0.0033881899435073137, 0.0031664078123867512, 0.0030703600496053696, 0.0025391275994479656, 0.0051770168356597424, 0.0025586502160876989, 0.0031989896669983864, 0.0020560864359140396, 0.0029748708475381136, 0.0055306097492575645, 0.0028481704648584127, 0.0022428061347454786, 0.0071866693906486034, 0.0022424354683607817, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 580, -47, 2138, 3008, 1794, -801, 1741, -507, -1207, 98, 2546, -1133, 1535, 3002, 852, 1546, -429, -221, -191, 2887, 1981, -140, 818, -342, -483, 3013, 725, 1002, 3244, 1595, 1923, 347, 1026, 1717, 2265, 1279, -106, 1268, 1501, -2606, 107, 673, 152, 724, -598, 186, -580, 396, -3695, 1894, 577, -1717, 3861, -557, 1259, 660, 479, 1626, -286, -809, 83, 605, 183, 1800, 2675, 1206, 1262, 2068, 2275, -435, 1410, 4775, 1816, -554, 2168, 4812, 572, -2018, 873, 688, 4475, 1067, 178, -591, 755, 470, 606, -1148, 1967, -99, 1820, 440, 200, -1439, 908, 750, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00044395655277185142, 0.00043115735752508044, 0.00027849324396811426, 0.00027524447068572044, 0.0003352674248162657, 0.00049441785085946321, 0.00037319620605558157, 0.0003489646187517792, 0.00031039910390973091, 0.00048043989227153361, 0.00025630084564909339, 0.00039909625775180757, 0.00039034101064316928, 0.0002391854504821822, 0.00044864349183626473, 0.00023206644982565194, 0.00050246907630935311, 0.00040519004687666893, 0.00052411813521757722, 0.00021405216830316931, 0.00026354371220804751, 0.00045455532381311059, 0.00045414679334498942, 0.00039667545934207737, 0.00037763873115181923, 0.00028452672995626926, 0.00029589646146632731, 0.00033122324384748936, 0.00023970272741280496, 0.00026714557316154242, 0.00027540276641957462, 0.00073033035732805729, 0.00034179986687377095, 0.00037305720616132021, 0.00029514150810427964, 0.00042397220386192203, 0.0002977960102725774, 0.00039015430957078934, 0.00025315646780654788, 0.00021001468121539801, 0.00035578224924392998, 0.00028084512450732291, 0.00037404883187264204, 0.00035231863148510456, 0.00038736857823096216, 0.00031077902531251311, 0.00047032153815962374, 0.00029717606958001852, 0.00018778571393340826, 0.00036672365968115628, 0.00051679491298273206, 0.0002661894541233778, 0.00020578590920194983, 0.00028924390790052712, 0.00031421362655237317, 0.00038762166514061391, 0.00047805401845835149, 0.00027754242182709277, 0.0004838262393604964, 0.00035232934169471264, 0.00040277195512317121, 0.00029760008328594267, 0.00062936177710071206, 0.00037315418012440205, 0.00023619638523086905, 0.0003549862012732774, 0.00032729489612393081, 0.00033534190151840448, 0.00029319556779228151, 0.00032606892636977136, 0.00039334734901785851, 0.00019154303299728781, 0.00025538291083648801, 0.00041670995415188372, 0.00030148250516504049, 0.0001713665114948526, 0.0003152899444103241, 0.0003023720346391201, 0.00032198239932768047, 0.00036113435635343194, 0.00020551063062157482, 0.00028752608341164887, 0.0006000376888550818, 0.00045603918260894716, 0.00025355821708217263, 0.00029791551060043275, 0.00050470989663153887, 0.00030739608337171376, 0.00040586965042166412, 0.00046926928916946054, 0.00035342905903235078, 0.00050651782657951117, 0.00033330637961626053, 0.0002422249672235921, 0.00036911669303663075, 0.00037989817792549729, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ 11,74,-127,9,61,24,98,84,-88,-34,91,-115,109,120,-81,39, 
  /* [1][0][][] */ -28,-5,-82,-11,-20,50,27,-127,57,-25,-28,-48,0,-42,-37,3, 
  /* [2][0][][] */ -14,-20,22,71,42,45,-123,127,-33,-7,76,-63,-20,-60,-18,71, 
  /* [3][0][][] */ 109,-91,96,-12,0,-10,-38,127,-59,51,69,57,-6,51,-6,18, 
  /* [4][0][][] */ -41,-31,-6,32,-69,-3,-29,-127,-13,-3,37,0,41,35,91,111, 
  /* [5][0][][] */ 127,18,-20,-47,-92,48,36,64,14,-2,69,72,104,32,-102,1, 
  /* [6][0][][] */ 34,-23,-70,-33,-78,12,1,-33,-18,-43,-29,-1,73,65,127,-27, 
  /* [7][0][][] */ -45,24,-49,-101,13,-74,-98,30,-107,64,-67,-61,-127,-51,4,113, 
  /* [8][0][][] */ 50,43,82,13,51,24,72,11,62,-30,40,5,-127,-27,-74,9, 
  /* [9][0][][] */ -66,74,31,-49,-21,-14,39,18,-49,51,-33,41,50,127,9,40, 
  /* [10][0][][] */ 85,53,-20,86,-28,11,44,-43,-72,-35,-55,-107,-127,-66,12,80, 
  /* [11][0][][] */ 35,-3,52,5,-9,-15,11,82,-71,28,-35,21,4,-14,56,127, 
  /* [12][0][][] */ -52,-34,-12,-16,7,5,127,21,-74,22,28,-10,2,58,-25,83, 
  /* [13][0][][] */ 32,29,31,69,112,84,82,127,-57,75,-42,-21,35,59,-88,-13, 
  /* [14][0][][] */ -70,113,5,-15,-1,41,36,3,-72,44,127,-6,-103,31,-73,44, 
  /* [15][0][][] */ -34,-31,-127,-48,90,-39,-83,-42,-36,-38,-15,-84,7,-96,-39,48, 
  /* [16][0][][] */ 103,-18,1,1,30,7,53,-18,-61,-14,127,-4,49,14,-28,7, 
  /* [17][0][][] */ -27,0,-46,-70,-17,-55,102,-127,1,-8,-20,21,45,59,35,43, 
  /* [18][0][][] */ 1,111,0,-48,48,-53,-3,-36,-30,127,-29,-5,-19,51,-10,-32, 
  /* [19][0][][] */ -85,-127,122,-74,32,-109,53,-56,29,32,100,94,36,-11,84,-36, 
  /* [20][0][][] */ -9,98,67,-6,5,-14,9,-18,73,-13,82,-31,-127,-31,-73,-10, 
  /* [21][0][][] */ -28,33,44,3,59,35,42,58,-127,27,-27,9,-22,10,-69,-17, 
  /* [22][0][][] */ 4,-83,22,6,22,-127,105,11,21,-41,-36,-54,44,-68,-42,-51, 
  /* [23][0][][] */ -61,-99,51,16,5,-56,34,-49,25,-29,78,13,-12,58,40,127, 
  /* [24][0][][] */ 77,2,6,127,84,65,-100,-124,94,27,-82,19,16,-10,-57,-26, 
  /* [25][0][][] */ -46,24,18,-46,-30,10,27,-41,-46,57,-15,12,52,127,36,12, 
  /* [26][0][][] */ -79,93,25,7,20,-112,-3,-34,26,32,-5,84,-2,6,-104,127, 
  /* [27][0][][] */ -14,-127,-63,14,-58,106,12,-63,16,-28,46,-47,39,-44,-97,-19, 
  /* [28][0][][] */ -20,-2,45,87,35,23,-23,-127,-121,46,91,1,79,-1,-45,-21, 
  /* [29][0][][] */ -126,118,-19,-17,-31,85,-122,-87,-97,-17,4,5,15,-66,-127,63, 
  /* [30][0][][] */ 65,81,-73,78,-91,-105,-75,-19,-44,-31,-4,-108,127,41,-1,94, 
  /* [31][0][][] */ 127,23,-46,-22,-46,20,43,39,-30,-3,31,33,26,18,-28,13, 
  /* [32][0][][] */ -30,-20,127,13,3,88,80,45,-21,-3,-5,35,18,67,68,53, 
  /* [33][0][][] */ 17,19,-109,-34,-8,91,101,18,-22,-40,41,-75,115,127,-36,56, 
  /* [34][0][][] */ -107,-38,113,43,14,-29,126,-64,-127,42,49,-41,63,43,-33,-33, 
  /* [35][0][][] */ 5,-9,-35,-7,-47,127,-23,-46,-39,95,18,97,-31,33,-3,49, 
  /* [36][0][][] */ 1,-109,119,-42,-43,32,-61,-5,11,6,-63,102,28,-127,-47,73, 
  /* [37][0][][] */ 65,-1,67,-19,101,-68,-31,75,-59,127,-64,4,-97,-36,117,-32, 
  /* [38][0][][] */ 32,51,45,-110,-18,-53,-107,59,-109,100,-106,-44,-77,-120,-127,62, 
  /* [39][0][][] */ -120,26,-75,-31,-120,-127,119,11,-125,-37,33,102,37,2,11,55, 
  /* [40][0][][] */ 127,32,-8,-109,-86,16,14,-66,-27,-29,-54,-87,9,58,33,38, 
  /* [41][0][][] */ 96,-81,-95,-31,-10,-17,-56,-26,96,-48,-1,-77,127,-63,79,-52, 
  /* [42][0][][] */ 10,-99,-88,127,21,-64,-102,47,14,-45,23,44,-62,59,-59,6, 
  /* [43][0][][] */ -87,-27,-46,-127,-47,-17,-4,74,38,-105,-22,21,-25,-26,-28,81, 
  /* [44][0][][] */ -51,39,36,-63,-20,-40,19,111,127,-77,84,114,121,51,-35,10, 
  /* [45][0][][] */ 38,80,-81,81,127,-104,-53,-28,120,-75,65,-66,-31,10,-64,63, 
  /* [46][0][][] */ -39,-45,18,-9,97,-21,38,-1,-28,127,-18,-113,45,59,-53,79, 
  /* [47][0][][] */ 94,-58,-53,-13,80,8,-50,-61,-10,112,-33,14,10,-127,-89,29, 
  /* [48][0][][] */ -27,9,-12,-116,-9,-51,100,-127,3,20,-5,57,59,50,11,46, 
  /* [49][0][][] */ 0,82,-127,31,92,-17,81,63,-10,4,39,-76,-9,11,103,-57, 
  /* [50][0][][] */ 3,42,-20,12,-127,-18,-62,-55,64,65,32,21,-38,-35,12,29, 
  /* [51][0][][] */ 127,-55,-50,-20,-40,83,-96,-35,40,-15,-43,96,-20,-92,-15,61, 
  /* [52][0][][] */ 18,-36,58,69,-35,-82,-127,-3,-92,-60,-42,-61,17,-80,0,80, 
  /* [53][0][][] */ 6,89,54,-123,-3,127,80,-23,-32,-8,2,-30,97,-112,14,60, 
  /* [54][0][][] */ 31,123,-1,-16,-4,-91,-127,64,23,-26,-37,115,75,85,29,66, 
  /* [55][0][][] */ -30,-17,42,31,51,-11,98,59,-77,0,9,19,127,38,-9,7, 
  /* [56][0][][] */ 127,6,-4,13,-34,120,-58,-33,-31,16,-32,3,-36,73,-24,50, 
  /* [57][0][][] */ -58,-51,-69,-60,-50,-118,64,-30,-127,-43,32,90,43,24,-13,82, 
  /* [58][0][][] */ 61,-60,54,32,25,-46,-17,20,12,-17,-127,-12,33,-43,-58,59, 
  /* [59][0][][] */ 68,13,-127,62,10,30,46,-6,-49,-43,15,-78,-83,-43,23,84, 
  /* [60][0][][] */ 8,17,-18,7,-15,-20,-33,5,-43,-61,68,101,-33,-127,-37,6, 
  /* [61][0][][] */ -68,16,96,-127,-107,-19,69,92,46,-44,35,111,73,-3,26,111, 
  /* [62][0][][] */ 64,35,-15,-127,-11,-8,0,-14,-16,21,-10,36,10,-16,-91,-72, 
  /* [63][0][][] */ -12,-34,1,25,-65,-74,-43,-14,-48,3,-30,-17,127,-4,67,-15, 
  /* [64][0][][] */ 62,-5,-26,98,-114,-21,-17,-90,76,127,36,14,32,-60,-48,126, 
  /* [65][0][][] */ -26,5,-35,-30,-70,52,29,-23,42,-127,93,-61,67,60,-121,57, 
  /* [66][0][][] */ -127,95,-94,-123,35,-57,-102,-56,-82,124,84,15,-113,-51,15,55, 
  /* [67][0][][] */ 2,-22,-127,-96,30,35,7,-25,16,-2,25,-14,23,32,18,45, 
  /* [68][0][][] */ 70,21,-13,-46,-55,17,41,35,-78,56,123,-8,-10,-42,-127,-4, 
  /* [69][0][][] */ 86,-116,36,-72,13,-127,-30,108,14,62,78,95,-25,64,-50,10, 
  /* [70][0][][] */ 27,-8,127,-5,97,-57,94,-18,-31,11,-60,64,-46,22,-91,53, 
  /* [71][0][][] */ -28,4,77,-71,-127,-60,24,-26,-35,-16,28,-104,-42,-12,17,34, 
  /* [72][0][][] */ -71,-107,15,-126,58,-20,5,35,-25,37,-114,4,56,114,-51,127, 
  /* [73][0][][] */ 10,6,41,-5,127,-123,-21,13,-10,110,-74,40,-77,-61,112,-12, 
  /* [74][0][][] */ -93,8,-127,-56,43,-38,-37,13,-39,21,-101,-35,-17,-35,-6,64, 
  /* [75][0][][] */ 70,-44,52,-116,12,4,-127,-36,-18,-108,98,16,7,-29,-19,-6, 
  /* [76][0][][] */ -6,-53,1,125,33,127,98,-41,47,-96,36,69,75,-86,-19,35, 
  /* [77][0][][] */ -67,-56,114,-28,7,-14,0,-127,6,22,62,91,55,33,15,11, 
  /* [78][0][][] */ -31,21,12,-6,-31,-50,27,-13,67,2,-11,-127,-98,-54,-91,-69, 
  /* [79][0][][] */ -50,-75,-52,-19,127,44,-38,10,-7,-6,-15,27,-20,-83,-58,13, 
  /* [80][0][][] */ 9,-97,34,119,-46,-3,-127,101,-21,28,99,-18,-80,6,6,62, 
  /* [81][0][][] */ 108,71,-23,101,-11,60,56,117,6,18,127,46,118,36,76,-28, 
  /* [82][0][][] */ -43,2,-14,-49,36,-127,-112,-29,20,50,-31,-7,-15,65,-55,-4, 
  /* [83][0][][] */ 103,-23,40,-10,-8,-2,-127,28,18,-86,31,-17,-1,-18,4,-2, 
  /* [84][0][][] */ 47,-92,-127,-7,116,49,18,7,-105,-6,-115,-36,65,-70,-79,54, 
  /* [85][0][][] */ 14,74,46,-70,98,7,68,-127,88,-35,54,-17,111,-93,0,11, 
  /* [86][0][][] */ 104,-40,127,91,-11,-31,93,33,-68,-33,-93,-52,36,18,-54,5, 
  /* [87][0][][] */ 16,11,36,-83,72,-22,-46,14,13,-21,71,-32,-76,-127,-23,34, 
  /* [88][0][][] */ -47,-37,43,-11,16,23,-56,-56,-1,2,-49,-127,-48,-44,-20,-17, 
  /* [89][0][][] */ -57,11,-15,-47,41,19,-127,46,94,26,-71,-3,-10,-83,-46,-13, 
  /* [90][0][][] */ 12,-9,-41,-97,127,24,-52,44,24,38,20,-3,33,10,-87,-13, 
  /* [91][0][][] */ -3,-39,26,27,-48,-9,-33,75,-72,-59,15,-69,-17,77,16,127, 
  /* [92][0][][] */ -23,73,3,-14,-17,65,-100,64,-46,-17,62,4,-34,127,50,24, 
  /* [93][0][][] */ -1,58,-82,-97,127,59,-92,7,56,64,76,95,-107,-6,-84,124, 
  /* [94][0][][] */ 80,67,55,-45,-127,-100,-21,0,56,-61,38,29,-55,-81,-32,16, 
  /* [95][0][][] */ 60,14,-14,47,127,3,-62,57,40,-15,-74,82,0,-12,63,-18, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.003348527941852808, 0.0032519903033971786, 0.0021005263552069664, 0.0020760225597769022, 0.0025287435855716467, 0.003729130607098341, 0.0028148202691227198, 0.0026320542674511671, 0.0023411752190440893, 0.0036237023305147886, 0.0019331409130245447, 0.0030101705342531204, 0.002944134408608079, 0.0018040485447272658, 0.0033838790841400623, 0.0017503537237644196, 0.0037898567970842123, 0.0030561327002942562, 0.0039531439542770386, 0.0016144815599545836, 0.0019877699669450521, 0.0034284687135368586, 0.0034253874327987432, 0.0029919117223471403, 0.0028483278583735228, 0.0021460335701704025, 0.0022317895200103521, 0.0024982406757771969, 0.0018079500878229737, 0.0020149368792772293, 0.0020772165153175592, 0.0055084931664168835, 0.0025780145078897476, 0.0028137718327343464, 0.0022260951809585094, 0.003197796642780304, 0.002246116753667593, 0.0029427262488752604, 0.0019094244344159961, 0.0015840289415791631, 0.0026834760792553425, 0.0021182652562856674, 0.0028212512843310833, 0.0026573517825454473, 0.0029217149131000042, 0.0023440406657755375, 0.0035473848693072796, 0.0022414408158510923, 0.0014163677114993334, 0.002766001271083951, 0.0038979088421911001, 0.002007725415751338, 0.0015521335881203413, 0.0021816128864884377, 0.002369946101680398, 0.0029236238915473223, 0.003605706850066781, 0.0020933547057211399, 0.0036492436192929745, 0.0026574325747787952, 0.0030378943774849176, 0.0022446389775723219, 0.0047469409182667732, 0.0028145033866167068, 0.0017815035535022616, 0.0026774718426167965, 0.0024686111137270927, 0.0025293054059147835, 0.0022114180028438568, 0.0024593642447143793, 0.0029668095521628857, 0.0014447071589529514, 0.0019262172281742096, 0.0031430213712155819, 0.0022739220876246691, 0.0012925263727083802, 0.0023780642077326775, 0.002280631335452199, 0.0024285418912768364, 0.0027238442562520504, 0.0015500573208555579, 0.0021686560939997435, 0.0045257648453116417, 0.0034396606497466564, 0.0019124547252431512, 0.0022470180410891771, 0.0038067579735070467, 0.0023185249883681536, 0.0030612586997449398, 0.0035394483711570501, 0.0026657271664589643, 0.0038203943986445665, 0.0025139525532722473, 0.0018269739812240005, 0.0027840507682412863, 0.0028653696645051241, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 16459, 10649, -6751, 3957, 2228, 8965, 418, 8425, 14961, -5561, -1374, 3710, -11900, 13432, -173, 11249, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 8.1805133959278464e-05, 9.7664509667083621e-05, 9.5175491878762841e-05, 9.0384994109626859e-05, 0.00011118905968032777, 0.00012998504098504782, 9.0394933067727834e-05, 5.490096373250708e-05, 0.00010025747178588063, 9.1934576630592346e-05, 0.0001091904632630758, 6.6473228798713535e-05, 8.005660492926836e-05, 7.4809569923672825e-05, 0.0001099806759157218, 9.1380708909127861e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -88,17,56,-18,-61,-46,-59,15,-70,4,-42,-77,29,17,33,-64,9,22,92,6,6,-44,98,83,31,17,-37,22,-59,-102,-53,6,-72,-31,34,38,-9,10,-7,0,-3,2,-95,1,-93,-25,14,73,-35,-27,-30,-13,22,12,35,-51,-127,14,-11,68,62,19,-19,12,-54,-48,-115,15,-65,-68,14,-9,-7,-28,-70,-68,-43,20,-45,-4,-27,71,84,-61,36,31,27,63,38,-2,-25,-17,-25,-20,-54,22, 
  /* [1][0][][] */ 38,31,43,-32,-75,-39,-42,32,-22,-23,31,-78,12,-31,-48,-57,-10,10,-43,47,-30,-55,34,49,-6,-56,-2,-72,101,-98,127,-42,42,22,-19,70,65,69,-38,-59,22,3,-6,3,-8,47,-112,-35,-44,-46,-17,-47,44,-61,-41,38,60,-35,-23,-10,36,13,-26,-66,59,24,-52,-6,-12,1,-77,-14,-48,-20,19,-50,9,12,47,-57,-30,-29,-58,-3,25,-18,-42,-23,-91,1,-40,37,20,65,-32,49, 
  /* [2][0][][] */ 71,-45,26,35,7,-55,69,20,-32,-20,-15,20,-44,-25,9,-60,-76,-60,-27,35,19,-11,-2,-10,8,-75,39,-33,-2,30,-41,122,-45,127,-29,-16,23,-38,-35,-35,-67,92,104,33,-40,6,-32,12,45,19,-86,-63,77,-9,-9,80,62,-30,44,-71,12,24,-18,22,114,29,8,-19,52,44,-29,-13,50,39,64,42,44,-76,84,65,72,-18,-34,58,-77,51,7,33,5,-15,-9,30,-45,15,4,35, 
  /* [3][0][][] */ -21,-27,-32,30,-14,-46,38,-63,-43,89,118,43,13,-13,-63,5,27,-32,21,-7,8,120,34,-98,23,25,-108,6,77,-45,69,-31,-27,52,-34,17,33,51,35,-37,-53,2,-18,8,-84,50,26,-1,-20,-64,-92,-20,18,-88,-28,-37,13,52,-16,34,26,-1,-45,4,37,43,-127,-1,-24,-39,8,-70,-34,-87,62,-1,6,-20,-20,-32,-10,-28,-56,18,7,-17,0,-22,3,48,38,14,47,-9,-62,71, 
  /* [4][0][][] */ 9,18,-15,8,19,13,-12,15,-33,38,91,0,-1,18,0,-55,14,-1,-40,20,21,-42,46,50,-39,12,-127,15,-26,-28,20,21,-61,-21,27,58,-5,25,-2,-37,-17,-36,22,-47,-31,10,-18,33,-53,17,4,23,35,-2,-51,5,22,-27,8,4,36,0,7,22,-38,17,-42,-1,-32,20,-29,52,30,-66,-8,-46,32,-29,-17,1,-24,68,-41,3,-14,15,11,-11,48,-21,11,29,-41,-46,26,11, 
  /* [5][0][][] */ -103,5,55,-23,23,-36,112,-10,-47,72,-29,-49,4,-25,-25,-97,-8,-28,37,4,-94,-7,-77,-17,-50,-17,-19,29,17,-84,-28,45,32,112,-7,55,-29,27,52,-24,-35,120,57,-67,-9,70,63,-16,5,16,4,46,19,-53,44,-86,2,-65,-36,-55,67,91,-38,-2,-2,-47,-127,-38,-81,-13,-42,30,-10,5,-8,-45,37,-33,-31,-20,113,-5,26,-65,-58,25,5,14,-30,24,25,25,-2,29,2,87, 
  /* [6][0][][] */ 25,-7,-103,29,-20,-95,97,81,-38,98,-12,65,-127,-52,48,63,-17,-49,-52,-57,4,-37,-57,-75,-58,25,34,38,31,12,50,-47,56,20,-4,-64,-11,26,27,117,22,57,-33,-42,4,-37,-66,1,48,-47,-41,62,-2,-9,-5,-37,69,15,17,26,-90,31,-89,-8,8,3,11,66,45,32,6,-54,-36,49,83,47,49,-59,32,-47,-22,-52,-64,27,6,-65,7,-40,-51,54,44,48,-27,13,-66,62, 
  /* [7][0][][] */ 8,84,-12,-47,-31,-17,-20,5,-68,-16,-66,-66,-37,21,26,-27,-50,-50,-2,75,-16,116,-11,40,-10,-10,21,1,77,45,97,-31,70,12,-10,26,-20,-7,14,-17,-68,-41,-8,-79,33,-31,77,-1,25,-74,-78,-34,-45,-7,-10,-2,27,-14,-116,4,28,89,28,-19,21,21,-45,11,-62,-21,-96,29,26,45,-69,39,-51,63,0,-127,-23,-26,54,-67,47,-30,-20,-18,-29,48,-67,8,57,-25,-37,20, 
  /* [8][0][][] */ 19,96,-40,70,-41,-24,-108,1,-76,-48,84,18,-35,51,76,127,35,-62,24,42,19,-20,22,16,-20,107,-22,34,-33,-26,-43,-51,-32,-94,-25,-88,-22,17,29,-45,20,-80,-8,39,-37,-64,-1,0,-20,-57,63,80,-6,-7,-119,97,-15,58,-10,-31,-66,-2,13,43,-7,-71,-23,-10,-30,13,4,-10,-45,-101,-115,-25,-62,58,-44,-20,-18,-17,-50,-50,-23,18,50,22,11,75,-67,-23,-101,-123,39,-34, 
  /* [9][0][][] */ -26,15,-61,39,-45,-20,69,72,-38,24,-32,97,-23,-12,9,72,23,7,78,4,36,38,51,-108,-48,-10,8,-18,29,-36,56,45,-31,28,2,-127,5,-34,-8,-50,-17,9,62,-6,7,6,-1,2,7,68,9,-4,-22,-58,21,4,3,-30,68,-60,-24,46,-24,-19,85,-7,-27,-6,-42,15,44,34,-2,62,-17,-9,-18,48,-32,-21,45,-29,54,23,19,14,-22,-11,-43,-5,9,10,63,-4,-17,11, 
  /* [10][0][][] */ 46,-7,-36,-20,-2,-8,53,1,20,-15,-100,-25,-52,-17,9,11,-82,-26,-8,-5,22,19,-3,3,-29,52,90,-18,-45,-59,-36,-17,52,-52,35,13,65,-41,68,127,19,-41,6,7,-3,-65,1,30,39,85,-75,-46,-10,17,16,30,18,-49,43,54,-22,19,-52,-30,3,-70,49,48,8,-28,-16,27,81,80,0,-68,24,-67,30,-22,-50,26,19,-2,-30,-37,-16,12,-31,9,19,36,38,70,-40,1, 
  /* [11][0][][] */ -43,-8,55,-43,21,-12,-55,-39,32,-82,50,33,8,15,10,-23,-25,-26,42,1,-26,35,-30,-60,12,1,-28,10,4,-60,28,-35,31,16,12,-65,-69,-5,-99,22,-79,24,-47,50,44,-1,-8,-32,8,-18,-44,-70,42,43,56,-68,-35,-40,5,-104,-13,-8,10,-84,-10,-70,58,63,127,36,81,-34,11,-40,27,-19,91,41,25,16,-3,9,-22,79,69,19,37,31,-85,-59,-7,33,65,12,99,69, 
  /* [12][0][][] */ 46,-18,-44,-21,31,97,42,42,25,103,12,67,-7,27,3,2,-51,36,4,-1,127,-26,50,-76,2,5,-91,-31,-45,70,-25,-15,41,13,-9,-29,8,-4,1,33,35,-6,62,19,-22,39,15,-11,-69,37,19,55,-33,-16,28,33,-63,60,26,54,11,-72,12,-98,-53,59,-31,-17,1,-40,74,29,-22,-12,7,44,-11,50,-78,-19,-10,27,98,2,-14,58,-44,-53,66,5,-71,30,77,-5,-40,-100, 
  /* [13][0][][] */ -9,31,-12,-35,-58,-32,-11,-43,-14,-46,-102,-87,58,-118,-52,-100,-16,-41,-67,-24,-89,-34,-8,78,-52,-9,120,2,36,-37,49,42,21,-10,-127,97,-39,-44,56,-38,113,-7,51,32,23,-93,31,-28,65,-5,-60,23,42,-14,19,90,76,-73,-31,-18,56,40,13,-93,44,22,21,26,-75,-39,-59,-4,-72,29,-50,-60,-89,48,43,66,-24,41,22,-80,23,6,2,-27,-27,7,19,-32,-35,12,-32,-1, 
  /* [14][0][][] */ 32,25,-78,-1,51,64,-103,-8,37,-31,109,11,9,-29,-29,-53,-47,16,46,127,17,-32,22,-12,0,37,-38,70,8,2,-31,6,70,-14,-45,-7,10,34,64,36,49,7,58,23,-4,-54,33,-31,47,-14,-32,-19,35,0,-52,45,39,55,-69,-28,-28,-55,-23,-108,41,-48,-31,-8,-73,38,-17,10,-3,-51,5,-22,24,-7,-27,-10,31,-10,-8,-2,-33,60,1,-21,-62,64,85,19,4,-54,-56,-76, 
  /* [15][0][][] */ -105,-36,61,-67,36,-10,-33,-78,3,10,1,87,-13,-7,14,72,-109,-24,-7,-86,60,-43,-19,-49,59,-31,61,-56,-89,-112,-53,28,-52,68,95,-77,-62,-54,10,-20,-30,-13,23,-48,0,5,83,96,-50,-18,43,-48,-61,70,1,-81,-127,0,100,1,-16,52,-62,23,-114,-27,5,27,36,-62,88,-15,59,-1,-50,-72,22,21,0,-26,-32,112,53,24,27,-28,-105,9,-3,-61,-106,38,62,-39,-14,51, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0034767179749906063, 0.00415074173361063, 0.0040449583902955055, 0.0038413621950894594, 0.0047255349345505238, 0.0055243638344109058, 0.0038417845498770475, 0.0023332908749580383, 0.0042609423398971558, 0.0039072195068001747, 0.0046405945904552937, 0.0028251120820641518, 0.0034024056512862444, 0.0031794065143913031, 0.0046741785481572151, 0.0038836800958961248, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 344, -5961, -4448, -3586, -1453, 545, -677, 133, -99, -3560, 10873, -1636, -7858, 9901, 6139, -1812, 16049, 6071, -6396, 65, -4387, 2607, 3168, -1244, 536, -8408, -435, -4094, -826, -9387, -2289, -317, 19961, 1247, -4334, -175, -2093, -732, -2464, 12062, -359, -2024, 844, -6534, 19352, 16787, 1821, 20121, -3276, 7331, 10336, -5920, 147, -970, -2686, 13918, -1594, 4248, 18108, 3929, 8618, 11716, 7239, -6718, 1078, 4592, -1279, 4279, -3537, -2236, -4390, -2652, 9103, 521, -2005, 9930, -4567, -5679, 3794, 482, 86, 18423, -4223, 5334, 11834, 2892, 5790, -3350, -6648, -7352, 12058, 498, -188, -2731, -6024, -4820, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00023709253582637757, 0.00013301147555466741, 0.00010456856398377568, 0.0002183895994676277, 0.0002035942452494055, 0.00033886250457726419, 0.00031298364046961069, 0.00022175746562425047, 0.0001491986186010763, 0.00021532732353080064, 0.00024549616500735283, 0.00044245686149224639, 0.00017944132559932768, 0.00010971802839776501, 0.00013013866555411369, 0.00027655481244437397, 9.7046693554148078e-05, 0.00020508711168076843, 0.00011510922922752798, 0.00011345728125888854, 0.00019155826885253191, 0.00025894073769450188, 0.0002594331162981689, 0.00017686994397081435, 0.00048604208859615028, 0.00010805763304233551, 0.00026028885622508824, 0.0001487782719777897, 0.00017134622612502426, 9.9299060821067542e-05, 0.00039129267679527402, 0.00017351067799609154, 0.00016949583368841559, 0.00018105468188878149, 0.0002225767238996923, 0.00030761896050535142, 0.00016432825941592455, 0.00025524437660351396, 0.00028864628984592855, 0.00013831310207024217, 0.00020505028078332543, 0.00016732460062485188, 0.00026412747683934867, 0.00012623718066606671, 7.0425878220703453e-05, 7.574239862151444e-05, 0.00020143558504059911, 9.8074953712057322e-05, 0.00018123607151210308, 0.00012259693176019937, 0.00020528640015982091, 0.00011238117440370843, 0.00014445788110606372, 0.00019481053459458053, 0.00021553291298914701, 0.00010783428297145292, 0.00015603346400894225, 0.00015309834270738065, 9.8084565252065659e-05, 0.00019553475431166589, 0.00015936112322378904, 0.00012118803715566173, 0.00014485020074062049, 0.00014033094339538366, 0.00018815482326317579, 0.00023691446403972805, 0.00060064642457291484, 0.00017231820675078779, 0.00019711736240424216, 0.000163026008522138, 0.00025887112133204937, 0.00015000425628386438, 9.9378150480333716e-05, 0.00018813481437973678, 0.00022732747311238199, 9.5573268481530249e-05, 0.00011408322461647913, 0.00016001545009203255, 0.00019917795725632459, 0.00016511589637957513, 0.00022453648853115737, 0.00010209906758973375, 0.00022688320314045995, 0.00013784109614789486, 9.0903311502188444e-05, 0.00019033851276617497, 0.00012933291145600379, 0.00015534742851741612, 0.00024642446078360081, 0.00018260684737470001, 0.00010013813152909279, 0.00030056561809033155, 0.00015279911167453974, 0.0002703568316064775, 0.00010356562415836379, 0.00019846868235617876, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 34,121,10,13,-47,21,49,45,50,-50,-65,112,28,55,62,-37,-127,8,51,28,51,49,75,91,11,15,-40,31,-58,25,14,-18,-91,-15,-12,114,39,28,23,-17,36,-66,31,84,-96,-127,11,-38,-22,-35,-56,34,53,46,20,-22,-87,-101,-114,-127,-89,1,-96,0,-43,21,68,-51,-43,44,68,9,-10,28,64,31,38,-27,-66,15,18,-74,79,-29,24,-72,-85,49,-87,-11,-49,42,127,15,71,0, -48,-19,14,30,-68,106,-20,-15,98,34,-25,64,-37,-47,-53,35,-55,46,53,77,122,5,101,127,-1,47,30,38,5,111,-18,-127,2,50,26,60,91,127,-20,-78,127,4,111,127,-87,-83,127,-127,-16,-72,-127,-28,16,127,-11,-127,-1,55,-127,-48,39,-127,-42,47,-57,58,102,-34,-1,127,127,15,-91,23,-28,-66,58,-29,-13,127,-18,-127,127,-112,-72,-51,52,89,104,46,-68,-11,110,-25,127,37, 2,-127,38,-3,-32,-3,-33,38,-3,38,-70,71,40,76,19,-66,-63,-3,23,21,-6,37,45,56,9,-3,-3,64,-14,16,-5,-80,-46,-84,-17,110,31,-39,25,20,5,34,11,75,-27,-67,-20,-30,67,-37,-19,62,71,3,18,-42,92,-127,-78,-90,-102,20,-127,-8,40,10,66,41,-62,-19,47,13,33,-58,-32,33,44,9,-82,4,11,-68,43,-6,29,-83,-59,5,-86,-10,-4,11,80,43,38,-7, 
  /* [0][1][][] */ 94,45,79,127,29,-20,127,34,-46,-104,-73,127,65,-88,-31,23,-106,-90,127,16,-127,-20,-127,-45,0,46,-127,127,-60,51,127,66,-16,47,30,112,-127,-4,1,-83,76,-111,12,68,-112,-24,1,-104,-89,-84,-98,52,84,-51,116,-14,-127,-8,-60,6,-75,-65,2,49,-97,-35,127,-119,-66,45,-34,-100,-127,75,127,-88,127,127,-38,-63,127,-63,-18,110,-27,-42,-87,118,28,12,-19,33,-8,-42,99,8, -127,57,-21,98,-50,-127,-103,-127,127,8,4,46,-73,-73,-44,127,-70,-127,121,127,61,-127,-108,97,-127,123,44,19,-52,31,-104,64,-127,64,127,-29,60,96,127,-97,-51,49,18,52,-18,-30,-98,-123,11,-127,-37,127,42,47,57,-66,3,94,88,28,3,-49,-69,127,-22,-127,69,127,62,56,-76,-60,-58,51,-112,-127,87,120,127,-76,-80,8,-67,65,-104,-47,63,127,127,127,-127,-127,-126,-47,69,127, 42,36,100,80,35,-20,-21,51,-58,127,-127,100,71,-53,-127,22,-26,-54,14,80,-127,-4,-66,-64,-3,19,90,16,127,75,46,-107,-39,-127,-1,127,-126,-50,-14,-95,5,127,9,89,-127,-46,-6,-68,127,-30,-61,24,2,-56,-127,0,94,-30,-125,50,-42,-76,-5,38,127,-34,103,-2,-63,-2,-20,-21,-99,-127,-2,-104,53,51,-49,-64,-93,-126,-32,127,-36,-25,-63,-10,-2,56,-3,50,-18,127,27,0, 
  /* [0][2][][] */ 46,-70,44,10,36,12,41,33,-79,-62,-60,-25,9,-31,-21,55,-36,11,-40,9,45,23,-26,-49,15,127,-29,12,-43,54,16,31,-49,-6,-17,2,74,-20,0,-127,-14,4,-41,-25,-110,-105,-27,-60,-48,21,-3,34,6,-22,9,-19,-44,-84,16,72,-110,5,25,-3,-61,9,69,-36,53,8,49,90,10,18,58,26,2,-6,-1,1,20,-69,10,-68,-103,43,-127,-54,-35,69,-3,21,-29,-6,3,-20, -57,46,127,-18,127,41,-20,-32,-121,2,-45,-48,127,-127,-28,-16,16,45,-15,-30,61,0,16,-27,67,-1,-15,19,-10,127,-12,22,-61,31,20,1,67,94,50,-94,-52,15,-127,-18,-29,-84,-60,-96,17,-40,52,70,127,-51,-41,-89,-12,121,-10,26,30,-113,75,45,-44,3,68,-16,127,-2,21,116,-45,15,-9,-113,16,-55,-33,-46,-17,-117,-31,-113,-127,127,26,-63,122,62,-28,28,-35,-21,36,-5, 23,94,54,2,-8,2,-26,32,15,80,-47,9,47,-33,-23,68,-43,12,-21,23,29,12,-2,-30,18,94,50,34,45,22,-4,-63,-58,-23,-4,-8,42,-26,16,-63,-9,42,-23,40,-37,-54,-12,-54,40,26,-7,-14,-16,-13,8,-27,54,-51,22,35,-127,-4,12,-4,51,12,40,6,33,16,25,127,47,-57,-31,29,48,7,-3,11,-28,-107,-33,-70,-87,18,-84,-62,-40,83,-11,32,-46,27,-44,-24, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0100764324888587, 0.005652987863868475, 0.0044441637583076954, 0.009281557984650135, 0.0086527550593018532, 0.014401656575500965, 0.013301804661750793, 0.0094246920198202133, 0.0063409409485757351, 0.0091514112427830696, 0.010433587245643139, 0.018804416060447693, 0.0076262564398348331, 0.0046630161814391613, 0.0055308928713202477, 0.01175357960164547, 0.0041244844906032085, 0.0087162023410201073, 0.0048921420238912106, 0.0048219342716038227, 0.0081412261351943016, 0.011004981584846973, 0.011025907471776009, 0.007516972254961729, 0.020656788721680641, 0.0045924494042992592, 0.011062276549637318, 0.006323076318949461, 0.00728221470490098, 0.0042202100157737732, 0.016629938036203384, 0.0073742037639021873, 0.0072035728953778744, 0.0076948236674070358, 0.0094595104455947876, 0.013073805719614029, 0.0069839507341384888, 0.010847886092960835, 0.012267466634511948, 0.0058783064596354961, 0.0087146367877721786, 0.0071112955920398235, 0.011225417256355286, 0.0053650802001357079, 0.002993099857121706, 0.0032190517522394657, 0.0085610123351216316, 0.0041681854054331779, 0.0077025326900184155, 0.0052103693597018719, 0.0087246717885136604, 0.0047761998139321804, 0.0061394600197672844, 0.0082794474437832832, 0.009160148911178112, 0.0045829568989574909, 0.0066314218565821648, 0.006506679579615593, 0.0041685937903821468, 0.0083102267235517502, 0.0067728473804891109, 0.0051504913717508316, 0.0061561334878206253, 0.0059640649706125259, 0.0079965796321630478, 0.010068864561617374, 0.025527473539113998, 0.0073235235176980495, 0.0083774877712130547, 0.0069286050274968147, 0.011002021841704845, 0.0063751810230314732, 0.0042235711589455605, 0.0079957293346524239, 0.0096614174544811249, 0.0040618637576699257, 0.0048485370352864265, 0.0068006566725671291, 0.0084650628268718719, 0.0070174257270991802, 0.0095428004860877991, 0.0043392102234065533, 0.0096425358206033707, 0.0058582467027008533, 0.0038633907679468393, 0.0080893868580460548, 0.0054966486059129238, 0.0066022654063999653, 0.010473039001226425, 0.0077607911080121994, 0.0042558703571557999, 0.012774039059877396, 0.0064939619041979313, 0.011490165255963802, 0.0044015389867126942, 0.0084349187090992928, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 8345, 2045, 792, -1453, 4814, 7071, 6291, 1735, -158, 8539, 2575, -7247, 3992, 4601, 573, -1178, 4102, 7018, 100, -610, 4745, 11141, 20669, -1099, -3035, -568, 7507, -243, 893, 713, 9070, -2314, 10927, 2752, 3800, -5213, -234, -3021, 1491, 1687, 2568, 530, 1569, -285, 531, 3280, 4143, 2021, 4443, 1948, 4628, 1825, -2279, 1083, 691, 1739, 1998, 2508, 5588, 1005, -1638, 3923, 4660, 3151, 2358, 6797, -9722, 2743, 3971, -553, 5823, 900, 2897, 1765, 4172, 392, -691, 1781, 1236, 3640, 4709, 2241, 6363, 409, 2191, 5527, 1961, -986, 9995, -28, 350, -1460, 7511, 2929, -520, -300, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 9.5355782832484692e-05, 0.00018826207087840885, 0.00022012188856024295, 0.0001488180278101936, 0.00014804319653194398, 0.0001128894291468896, 0.00013592577306553721, 0.00014480766549240798, 0.00019582091772463173, 0.00011542862193891779, 0.00015823023568373173, 8.9484208729118109e-05, 0.00015762291150167584, 0.0001114400292863138, 0.00014458097575698048, 0.000145237150718458, 0.00014292079140432179, 0.00011682605691021308, 0.00014719767204951495, 0.00013697953545488417, 0.00013203031267039478, 7.0398258685600013e-05, 5.0530339649412781e-05, 0.0002240048925159499, 0.00019023648928850889, 0.00019804068142548203, 0.00010249654587823898, 0.00015481443551834673, 0.00025662154075689614, 0.00020812400907743722, 0.00010132878378499299, 0.00013381346070673317, 8.871607860783115e-05, 0.00016756424156483263, 0.00016545268590562046, 0.00012570281978696585, 0.00024365748686250299, 0.00017614955140743405, 0.00012709155271295458, 0.0002230501122539863, 0.00016975132166408002, 0.00018003117293119431, 0.00019519956549629569, 0.00028540519997477531, 0.00037286078440956771, 0.00013533564924728125, 0.00014300197653938085, 0.00029351568082347512, 0.0001340743328910321, 0.00021887705952394754, 0.00016611063620075583, 0.00017892212781589478, 0.00016924050578381866, 0.00024194465368054807, 0.00023352181597147137, 0.00019981310470029712, 0.00015497321146540344, 0.00012658405466936529, 0.00012816961680073291, 0.00021391200425568968, 0.00013870799739379436, 0.00015331219765357673, 0.00013424610369838774, 0.0002109477500198409, 0.00015398603864014149, 0.00011329902190482244, 8.3182974776718765e-05, 0.00015360648103523999, 0.00016229161701630801, 0.00027120712911710143, 0.00011907111183973029, 0.00021732489403802902, 0.00014053539780434221, 0.00018138352606911212, 0.00013590522576123476, 0.00022198722581379116, 0.00020335752924438566, 0.00017752851999830455, 0.00020526812295429409, 0.00014807897969149053, 0.00011314596486045048, 0.00018982557230629027, 0.00012702049571089447, 0.00015986573998816311, 0.00016984486137516797, 0.00011682328477036208, 0.00014841128722764552, 0.00020069777383469045, 8.629536023363471e-05, 0.00019356860138941556, 0.00022041697229724377, 0.0001878816110547632, 0.00010687132453313097, 0.00015561198233626783, 0.00028789296629838645, 0.00017652432143222541, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -36,5,-29,-70,2,-49,-57,-59,52,-73,26,-96,106,-127,-38,-84, 
  /* [1][0][][] */ -66,74,-90,-127,-83,2,6,54,-22,5,81,-24,70,61,42,71, 
  /* [2][0][][] */ -13,-9,-63,-29,4,-39,30,4,-62,107,51,30,11,50,-89,127, 
  /* [3][0][][] */ -33,-49,14,-54,-92,25,-68,-106,-23,14,52,-68,-66,-35,-127,-26, 
  /* [4][0][][] */ 93,-20,-13,35,-57,-5,-98,57,43,127,0,67,31,3,-44,-66, 
  /* [5][0][][] */ -110,14,-122,-26,32,-56,-38,-20,41,-37,55,-93,40,-127,-103,-73, 
  /* [6][0][][] */ -46,-77,-10,31,-63,78,40,-44,-58,-37,127,10,35,-5,-73,7, 
  /* [7][0][][] */ -70,86,69,-106,127,107,-19,-76,13,103,-76,-57,90,-34,6,106, 
  /* [8][0][][] */ -24,0,24,17,81,19,71,127,-37,-24,-26,-34,27,51,-69,-33, 
  /* [9][0][][] */ -42,-7,50,67,-32,3,-44,-108,-19,-5,127,96,-1,-82,10,5, 
  /* [10][0][][] */ -33,-81,28,-93,-127,32,91,20,-27,-52,-7,40,-55,54,-104,13, 
  /* [11][0][][] */ 49,-114,-28,127,-98,-35,80,-11,114,104,-25,48,60,-111,26,116, 
  /* [12][0][][] */ -39,5,127,3,35,-8,-53,58,77,21,59,79,-26,49,-49,9, 
  /* [13][0][][] */ 35,-59,16,21,42,52,95,62,-127,62,-12,6,11,119,124,-79, 
  /* [14][0][][] */ 78,-89,127,38,90,73,116,44,109,94,52,74,79,-14,12,-69, 
  /* [15][0][][] */ 8,127,5,-54,37,115,-91,31,-64,-20,-48,-19,-22,88,-1,-38, 
  /* [16][0][][] */ -26,97,127,-50,25,98,-23,-19,2,-22,-31,29,83,4,99,123, 
  /* [17][0][][] */ 15,62,73,-127,28,-17,1,-66,-62,62,-18,62,-59,-56,81,-35, 
  /* [18][0][][] */ -69,-2,-86,-83,119,127,-92,-29,3,59,114,67,-9,100,-53,15, 
  /* [19][0][][] */ 45,66,53,68,65,-12,-48,-2,-26,78,55,127,68,44,-61,51, 
  /* [20][0][][] */ 106,0,15,23,-116,-25,-56,95,18,-71,-127,-44,68,-107,12,8, 
  /* [21][0][][] */ -105,-88,-26,124,-11,-6,-127,99,27,-32,41,14,-75,39,-91,4, 
  /* [22][0][][] */ 29,20,-66,-62,127,-22,-71,100,62,70,53,80,-47,40,22,21, 
  /* [23][0][][] */ -44,10,0,3,11,43,86,43,-27,127,-22,1,18,28,-42,-25, 
  /* [24][0][][] */ 36,-74,38,-22,127,9,30,-45,39,17,50,57,-72,12,-15,-1, 
  /* [25][0][][] */ 71,-26,60,17,6,-11,-84,79,102,-50,-63,-54,119,-61,127,40, 
  /* [26][0][][] */ 62,13,62,127,92,3,-51,-6,37,83,7,108,51,-76,23,-32, 
  /* [27][0][][] */ -67,31,-91,38,-37,77,-14,-88,18,-81,107,10,36,-28,127,76, 
  /* [28][0][][] */ -95,31,-27,-47,12,-26,-24,-45,-97,127,-52,16,-12,52,-43,26, 
  /* [29][0][][] */ 70,114,-43,51,9,61,-32,-46,36,39,-16,45,-127,38,-16,34, 
  /* [30][0][][] */ -22,54,-99,-91,64,-22,-21,-21,-62,44,-47,-21,15,7,-38,127, 
  /* [31][0][][] */ 42,-127,111,95,102,-98,-96,13,-47,-38,72,-72,-106,78,72,125, 
  /* [32][0][][] */ -52,61,-23,62,-85,92,15,51,17,-127,30,-51,65,37,59,69, 
  /* [33][0][][] */ -95,-43,66,127,-5,-9,-53,-33,-52,-80,84,-46,-18,-12,-1,109, 
  /* [34][0][][] */ 4,6,-76,-89,51,2,-26,45,-3,-21,-17,-17,-43,-22,-36,127, 
  /* [35][0][][] */ 117,-3,29,-18,18,44,-127,24,-14,-123,-42,-20,23,-49,38,-11, 
  /* [36][0][][] */ 21,-12,-127,-43,64,76,31,-8,19,-15,38,16,-25,23,-115,51, 
  /* [37][0][][] */ 58,51,82,-47,23,-127,43,-28,-103,56,-86,12,14,17,106,34, 
  /* [38][0][][] */ -28,119,47,-48,29,28,38,-52,19,-1,-127,55,-63,-87,-93,8, 
  /* [39][0][][] */ 86,32,-113,-85,15,-13,13,-33,14,-33,-1,-41,58,-7,-127,-36, 
  /* [40][0][][] */ -45,11,-79,-90,-31,-41,13,-127,32,-20,15,-59,39,68,26,76, 
  /* [41][0][][] */ -48,-111,38,127,-21,31,-73,-31,-65,-74,65,-57,-66,-26,-9,38, 
  /* [42][0][][] */ -4,62,-31,-127,-3,23,-3,-41,61,13,-49,8,73,-39,-33,5, 
  /* [43][0][][] */ 24,25,7,-21,127,-9,17,11,58,24,-19,-46,-81,-33,-41,-10, 
  /* [44][0][][] */ 44,-30,-3,32,-23,16,9,13,9,-80,55,22,127,10,-35,-32, 
  /* [45][0][][] */ 49,-119,-94,10,-1,-95,-46,75,7,-66,11,36,-89,127,-18,-9, 
  /* [46][0][][] */ 26,-64,21,50,2,21,-127,56,3,-61,53,-15,32,43,89,87, 
  /* [47][0][][] */ -29,-59,18,60,5,-22,52,-4,20,-49,-127,-38,39,-24,-64,8, 
  /* [48][0][][] */ -64,51,0,-56,-5,43,-10,-108,10,-55,45,-26,47,-127,-15,19, 
  /* [49][0][][] */ -91,-1,33,-51,-3,13,112,127,-42,-40,3,22,-57,59,-54,18, 
  /* [50][0][][] */ 52,-16,-64,17,47,-127,-43,-37,-57,27,-44,-24,-7,-76,-99,-41, 
  /* [51][0][][] */ -84,97,-41,110,-51,80,-72,-81,-58,-101,-26,-70,38,46,47,127, 
  /* [52][0][][] */ -113,-5,8,17,28,61,34,17,14,-84,-27,-34,-92,-69,-127,-8, 
  /* [53][0][][] */ -46,-46,-22,-127,-42,5,12,65,66,-55,-54,10,-26,20,59,82, 
  /* [54][0][][] */ -25,-66,21,19,-75,45,23,-39,-45,-89,50,8,-28,11,-127,12, 
  /* [55][0][][] */ -18,-19,-39,51,86,-30,65,97,-44,-67,-127,15,74,-8,-22,36, 
  /* [56][0][][] */ 115,-59,-53,-8,-127,12,-119,-12,-11,-61,-49,18,119,-75,58,49, 
  /* [57][0][][] */ -127,-27,60,-3,105,4,112,45,-7,73,-2,26,-87,118,-114,-56, 
  /* [58][0][][] */ 27,12,26,-2,37,-9,-64,-63,50,-127,-73,-21,-76,-27,-35,30, 
  /* [59][0][][] */ 18,7,-50,16,19,79,-78,-18,70,127,-90,6,-11,4,-27,15, 
  /* [60][0][][] */ 19,-127,-41,22,-126,-95,59,-10,50,-32,-20,17,-6,-94,36,56, 
  /* [61][0][][] */ -5,19,-60,6,0,15,-127,-25,-62,16,48,93,42,-16,15,76, 
  /* [62][0][][] */ 54,-15,23,18,20,41,14,127,-1,58,-5,94,-9,42,49,90, 
  /* [63][0][][] */ 19,-74,4,-4,-55,4,55,-9,-7,-5,-13,-8,-34,127,87,22, 
  /* [64][0][][] */ 29,-16,-67,-38,10,14,5,-52,13,-114,2,12,34,-40,-40,127, 
  /* [65][0][][] */ -30,-39,43,45,79,-68,123,104,-37,-17,-127,-97,36,98,-101,-2, 
  /* [66][0][][] */ -14,-127,-19,-117,-53,-86,21,-20,20,-22,28,25,-21,-101,-28,93, 
  /* [67][0][][] */ -48,-99,-74,-10,-127,106,2,-113,-83,-23,-36,-87,8,-3,-44,15, 
  /* [68][0][][] */ 127,54,-4,-26,-43,30,-42,1,-26,-51,-29,-27,31,-56,32,-38, 
  /* [69][0][][] */ 31,-8,5,-9,-2,-38,-40,41,-18,127,-10,4,11,25,49,-12, 
  /* [70][0][][] */ 51,0,-13,26,-112,58,-18,-87,76,127,20,75,71,-87,4,34, 
  /* [71][0][][] */ 64,-65,104,127,-96,-26,-3,-8,97,29,-37,85,74,-24,19,-7, 
  /* [72][0][][] */ -16,-73,35,92,59,-6,-127,73,81,28,59,39,-33,-87,-57,108, 
  /* [73][0][][] */ 93,35,14,-3,112,-83,-77,70,4,127,6,53,44,-93,79,-35, 
  /* [74][0][][] */ 117,-46,59,76,-107,23,9,-16,-103,-71,13,-60,97,-127,35,36, 
  /* [75][0][][] */ 33,74,-127,49,39,63,22,1,-19,-26,55,42,-68,45,77,54, 
  /* [76][0][][] */ -49,-60,11,-15,-47,14,62,-20,-75,26,52,35,-33,-127,-14,72, 
  /* [77][0][][] */ -115,115,-65,1,-40,-86,52,87,50,-93,16,113,-18,52,-26,127, 
  /* [78][0][][] */ 100,40,-66,28,-54,31,-127,-37,-15,-10,-44,-22,50,-47,27,20, 
  /* [79][0][][] */ -81,-71,111,36,-16,-124,-74,-50,-26,5,21,5,-72,127,-88,103, 
  /* [80][0][][] */ 80,98,-16,-127,15,3,112,10,76,57,-42,24,71,-44,-36,43, 
  /* [81][0][][] */ 26,-57,43,-101,68,11,-25,71,127,9,-27,-36,-33,26,-76,-82, 
  /* [82][0][][] */ 84,54,91,-15,127,-95,-8,56,-16,109,-37,29,-6,-46,45,-104, 
  /* [83][0][][] */ -51,-27,5,24,82,24,126,68,67,127,-9,-36,-57,36,-23,-68, 
  /* [84][0][][] */ 14,-74,19,47,-25,-88,-97,39,-123,78,-101,-56,-127,56,-12,-35, 
  /* [85][0][][] */ -110,77,28,-26,-47,-101,-58,-69,-51,38,8,-82,-127,-75,-48,34, 
  /* [86][0][][] */ -9,87,102,82,25,-35,59,23,-1,52,-69,-57,28,64,-127,-42, 
  /* [87][0][][] */ -41,60,127,-23,-101,-19,51,14,30,-34,34,15,-41,11,-4,-1, 
  /* [88][0][][] */ 23,-53,-127,7,62,39,-41,29,-5,-103,-99,-70,69,-41,0,56, 
  /* [89][0][][] */ 49,26,28,-127,25,-59,-85,64,113,-32,13,-85,13,-33,56,-61, 
  /* [90][0][][] */ -7,52,21,31,-8,31,39,106,4,-37,0,127,43,19,-34,70, 
  /* [91][0][][] */ -88,-33,-28,80,103,65,-14,-127,-56,-9,5,5,-103,-124,-68,-5, 
  /* [92][0][][] */ 5,100,21,-46,-116,20,-127,98,-70,90,86,70,-35,-36,31,24, 
  /* [93][0][][] */ 58,-15,46,-5,-127,-44,16,44,-94,-95,22,-41,-3,-66,-42,19, 
  /* [94][0][][] */ -11,-86,7,-127,15,33,-3,39,85,-6,8,89,8,44,-42,54, 
  /* [95][0][][] */ -22,-87,-32,-66,89,127,-51,38,17,23,-53,20,-19,78,-102,52, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0015023404266685247, 0.0029660887084901333, 0.0034680436365306377, 0.002344643697142601, 0.002332436153665185, 0.0017785849049687386, 0.0021415248047560453, 0.0022814599797129631, 0.0030851792544126511, 0.0018185900989919901, 0.0024929339997470379, 0.0014098332030698657, 0.0024833655916154385, 0.0017557494575157762, 0.0022778885904699564, 0.0022882267367094755, 0.002251732163131237, 0.0018406067974865437, 0.0023191147483885288, 0.0021581270266324282, 0.0020801515784114599, 0.0011091319611296058, 0.00079611083492636681, 0.0035292208194732666, 0.0029971960466355085, 0.0031201518140733242, 0.0016148438444361091, 0.0024391177576035261, 0.004043099470436573, 0.0032790156546980143, 0.0015964456833899021, 0.0021082451567053795, 0.0013977311318740249, 0.0026399923954159021, 0.0026067246217280626, 0.0019804611802101135, 0.0038388494867831469, 0.0027752546593546867, 0.002002340741455555, 0.0035141780972480774, 0.0026744499336928129, 0.0028364101890474558, 0.0030753896571695805, 0.0044965888373553753, 0.0058744610287249088, 0.002132227411493659, 0.0022530113346874714, 0.0046243704855442047, 0.0021123553160578012, 0.003448431147262454, 0.0026170907076448202, 0.0028189369477331638, 0.0026664019096642733, 0.0038118634838610888, 0.0036791609600186348, 0.0031480765901505947, 0.0024416192900389433, 0.0019943451043218374, 0.0020193257369101048, 0.0033702061045914888, 0.0021853591315448284, 0.0024154498241841793, 0.0021150615066289902, 0.0033235040027648211, 0.0024260662030428648, 0.0017850380390882492, 0.0013105565449222922, 0.0024200864136219025, 0.002556921448558569, 0.00427289679646492, 0.0018759779632091522, 0.0034239767119288445, 0.0022141500376164913, 0.0028577165212482214, 0.0021412011701613665, 0.0034974322188645601, 0.0032039193902164698, 0.0027969805523753166, 0.0032340208999812603, 0.002332999836653471, 0.0017826266121119261, 0.002990721957758069, 0.0020012212917208672, 0.0025187015999108553, 0.0026759237516671419, 0.0018405631417408586, 0.0023382354993373156, 0.0031620145309716463, 0.0013595925411209464, 0.0030496937688440084, 0.0034726925659924746, 0.0029600947163999081, 0.0016837690491229296, 0.0024516831617802382, 0.004535784013569355, 0.0027811592444777489, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -24355, -7969, 451, -7275, 11720, -10753, 24630, -14615, 17087, -11175, 16260, 8386, 1132, -34727, 4147, 4793, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 8.8903128926176578e-05, 7.3525407060515136e-05, 6.4551284594926983e-05, 7.1594775363337249e-05, 8.180726581485942e-05, 0.00015739008085802197, 7.248378824442625e-05, 6.5345775510650128e-05, 0.00010838684102054685, 9.1474394139368087e-05, 7.2591748903505504e-05, 8.3837076090276241e-05, 8.2551785453688353e-05, 6.6483960836194456e-05, 6.8430279497988522e-05, 7.5812509749084711e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 18,21,15,47,-43,-79,-11,-20,-31,-45,17,-21,71,-53,72,27,-68,-40,25,4,88,-9,-73,-15,-22,75,127,78,6,78,44,-33,5,-2,-4,-23,42,4,-8,7,110,16,28,-26,-8,-31,6,-50,31,-45,76,-14,-78,-15,32,30,-17,-55,-23,19,-36,18,-77,-6,18,-6,83,34,-3,-27,36,9,4,23,-11,20,61,-40,78,36,-45,52,45,37,-54,-25,-11,64,25,-8,-48,-23,23,-24,121,94, 
  /* [1][0][][] */ 20,32,-63,-21,-16,-68,103,-65,-69,4,-60,-62,-15,-18,10,-55,-7,-64,-35,-22,-14,-96,113,-49,6,31,-1,64,-28,18,-62,15,-43,32,7,28,-11,23,-50,111,39,16,9,-51,78,-48,29,32,-71,-2,65,-115,-27,52,42,55,48,38,-82,33,-59,-17,1,-32,52,30,97,6,-50,-127,-2,13,47,55,-18,21,-50,-20,101,-28,47,-25,63,-31,-15,-69,-25,20,-2,-32,32,-1,59,-50,-40,55, 
  /* [2][0][][] */ 3,-5,7,-21,42,24,-32,27,-48,41,25,-15,40,-7,13,25,20,-12,-127,-30,-29,-34,-8,5,9,0,-42,1,-29,-2,-11,69,-24,-37,-14,33,-26,54,-19,-33,52,10,25,31,17,42,2,8,-82,11,-38,8,-8,26,26,-32,42,33,53,32,-31,16,-10,46,39,0,-51,-4,6,-23,-17,-15,13,47,43,59,-34,-28,-34,-37,32,32,56,-28,11,-16,-22,-31,-29,-23,12,70,-4,15,86,-38, 
  /* [3][0][][] */ 50,-23,-29,-118,-51,-42,83,-1,27,127,-68,3,-16,-12,-9,57,70,62,-22,19,-65,30,11,0,-38,86,31,-26,-26,-15,-61,54,-1,-22,5,-45,12,-51,-41,101,-4,1,12,5,65,-50,-42,55,66,-9,-3,-46,52,37,15,-15,28,-8,-21,-19,-39,60,43,-12,-14,5,92,-54,-24,-20,-61,38,23,-36,-9,-63,30,-27,115,-31,-49,-61,-22,-55,-26,-47,79,61,-71,11,-69,38,-8,-46,-20,8, 
  /* [4][0][][] */ -34,53,47,22,-20,20,-48,-12,3,-30,-3,-26,17,42,-4,7,3,-62,-29,-77,56,-25,-76,23,-5,-15,-18,39,-32,127,-60,-12,-8,-17,31,-35,80,35,-34,19,28,25,44,-41,-86,-16,61,-38,31,-21,-55,-11,-84,20,32,16,4,57,-27,31,-23,-66,-44,-19,65,26,-40,-23,1,20,8,-73,-27,71,62,74,-61,14,-60,33,28,64,38,-50,38,-105,-43,-70,-18,-67,-38,-13,-4,2,45,-9, 
  /* [5][0][][] */ -11,-20,42,-19,-10,-24,-35,8,36,26,-16,-1,-21,-22,22,-5,-12,-1,-31,-43,-15,19,-6,19,15,-45,51,-12,1,23,-1,65,-2,-62,20,-11,-33,-20,-36,3,-36,2,-31,13,-11,22,-65,14,-3,11,35,-12,15,-55,8,2,-9,-55,5,-39,45,9,20,29,-39,23,112,-23,-4,-13,16,15,-10,29,18,6,-2,-2,127,26,-22,-2,-42,36,17,66,11,85,6,-38,-25,13,10,-33,-43,4, 
  /* [6][0][][] */ 48,-39,48,5,-35,105,-63,-48,-12,-65,-53,71,0,-10,-37,71,1,70,9,-21,-92,-17,-74,-48,-16,-53,5,25,-98,17,-3,-30,37,30,-34,-34,-19,-48,30,-19,-51,-3,15,-24,17,56,-127,1,55,18,-55,-69,53,11,-62,-58,18,-13,38,3,-15,-34,44,10,34,-46,-83,-33,-73,7,-31,-49,-12,-60,5,-42,76,16,-84,34,-61,37,15,-101,56,-11,-12,-9,-94,72,-68,73,18,-47,64,-92, 
  /* [7][0][][] */ -27,-10,-78,78,-43,35,35,-6,-110,-22,78,73,5,-35,6,-28,0,-20,26,25,-47,-43,-27,-44,77,35,21,96,15,40,11,31,-72,-126,18,127,1,-45,-56,13,-7,-2,40,-71,39,48,102,85,-28,46,-31,-18,18,-24,29,-7,-31,62,-86,-4,62,-18,-13,-49,93,-50,106,-56,-87,-15,50,-46,-2,-29,-84,-29,42,-43,110,-48,29,-11,-59,-18,63,6,-102,38,26,36,28,31,41,-18,78,14, 
  /* [8][0][][] */ -36,-63,-8,26,-35,-36,56,-10,-29,-42,47,51,-21,42,-36,-15,86,7,10,36,-1,-81,-36,-26,-40,-41,47,27,-45,76,14,-31,-36,18,22,2,-46,-80,22,-3,9,50,14,-45,35,-25,17,-23,34,28,81,7,-1,7,-57,-26,0,121,-85,2,-6,-71,-76,1,-80,-26,-37,1,-5,24,36,-30,-7,-127,70,-122,5,18,-80,3,-23,-2,17,74,72,-79,-53,48,-62,75,37,-34,-41,37,-1,-64, 
  /* [9][0][][] */ -10,-30,-25,21,2,32,16,58,-40,-12,64,58,-26,48,29,-54,2,47,-30,-43,6,56,-4,16,-28,54,10,18,46,8,23,3,-21,-8,-13,43,-4,-13,40,4,-9,-31,11,-13,23,46,-2,60,-46,13,-8,29,126,16,-51,1,16,-22,32,14,-45,-15,80,8,13,16,56,10,33,-3,-33,14,-4,-122,-33,-127,-30,-29,32,-39,-11,35,-7,-52,58,19,-43,2,-3,117,69,32,34,46,0,15, 
  /* [10][0][][] */ 20,47,13,-24,1,18,-64,-15,69,-9,-46,46,34,-1,-23,-43,-56,2,19,-10,1,3,-22,-15,16,-22,-111,38,-23,60,9,3,30,19,-41,-1,12,13,-8,0,36,-11,51,-46,-31,-12,28,33,3,5,-15,-25,-32,-13,-6,35,-27,7,-20,-21,-7,-25,-13,8,-10,-31,-101,-32,-43,-20,38,-3,-15,35,16,15,66,-15,-107,21,-20,50,-6,-21,-15,32,-48,-127,-11,22,-7,38,49,-28,9,24, 
  /* [11][0][][] */ 25,-47,10,9,-82,59,28,17,58,-62,-7,-17,34,16,17,-22,-19,39,19,-52,26,43,24,-18,45,25,64,16,4,-56,-15,35,25,118,-127,-23,31,-25,68,-20,-42,56,-40,2,-39,-20,10,-7,49,-7,-28,2,-4,27,-104,87,-48,-5,-9,-48,10,-16,1,-62,-8,-53,-115,-84,15,-28,-108,-5,56,23,-13,-29,28,35,-110,-73,30,18,-43,3,-18,25,54,98,40,-26,55,-6,-40,22,97,37, 
  /* [12][0][][] */ 6,27,-24,-16,6,-31,-6,51,59,-23,32,-11,-21,-20,-4,1,22,-29,-29,28,-3,43,17,43,-44,-52,-127,-15,68,-42,24,4,-2,-79,84,-23,35,-34,6,39,12,-48,-4,43,18,-8,1,-38,-52,-2,-22,87,82,-26,18,-99,14,-6,-43,-28,6,38,78,12,-27,11,24,43,124,37,39,27,-14,-17,-28,2,-28,-43,44,-67,-19,-38,2,-30,-13,2,0,-88,-27,27,-72,2,25,58,-9,33, 
  /* [13][0][][] */ -10,30,-102,25,42,38,-6,18,29,105,-58,49,-73,-16,78,-55,38,24,57,9,-42,-65,3,9,48,62,3,31,29,47,55,-25,-36,80,-15,61,25,-53,-75,-51,-7,-7,53,21,72,53,-14,66,-35,35,0,-23,-17,-62,92,73,18,-26,4,-2,23,20,10,-64,24,96,127,30,11,-6,-94,-14,78,71,-87,68,39,-84,124,-58,36,-42,60,4,50,53,-74,-2,-8,-15,-4,74,34,23,61,55, 
  /* [14][0][][] */ -11,51,3,24,-82,-85,38,46,-75,-45,58,-4,-95,-10,58,-10,-30,32,-58,31,-44,16,-90,-4,-58,16,-72,-127,-7,-6,20,70,-57,7,11,1,-24,-73,-20,-2,-4,-36,40,-18,-11,39,-75,44,-4,-22,100,22,-14,15,-5,13,-27,43,-11,81,20,73,-18,63,18,-47,-3,-47,39,45,62,46,-20,48,14,0,43,15,30,-2,-91,115,1,-111,83,-23,-13,5,-119,-12,-43,-19,-19,14,27,26, 
  /* [15][0][][] */ 71,-38,38,31,59,46,-23,-21,34,7,-68,-11,87,73,-18,-18,-11,-5,-69,57,6,-10,3,58,60,-54,88,31,34,-40,-28,62,84,35,1,-69,50,46,68,44,88,41,-14,-6,-64,-127,53,-51,-29,-26,-17,15,-15,-43,-35,63,-25,-14,-17,-13,17,-86,-41,40,23,43,-58,38,-21,-18,-10,-1,0,-116,-55,-78,-40,24,-117,20,73,-36,24,45,-63,-11,3,-26,40,80,7,-71,-27,-46,30,-48, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0037783829029649496, 0.0031248298473656178, 0.0027434295043349266, 0.0030427777674049139, 0.0034768087789416313, 0.0066890781745314598, 0.0030805608257651329, 0.0027771953027695417, 0.0046064406633377075, 0.0038876617327332497, 0.0030851492192596197, 0.0035630757920444012, 0.0035084506962448359, 0.0028255681972950697, 0.0029082868713885546, 0.0032220317516475916, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 6745, -2, -13915, 10424, -4671, 205, 319, -2133, 5783, -1700, -3658, -3530, 12971, -2568, -6256, -9586, -1781, 58, -9341, -180, -6344, -783, -5230, -1898, 43, 8235, -15917, -8102, 121, -4215, 1040, -1725, 13519, -385, -7296, 131, -1423, 10115, 4222, 15956, -4844, 6220, -4152, 10815, 1939, 1823, 11586, 5604, -4783, -37, -3686, 7012, -1401, -2305, -1642, 4044, -350, 6978, 1048, 5854, -3120, 1433, 1167, 8974, 16986, 295, 9935, 6059, -808, 1628, 5224, -3286, -616, 1456, -5202, -1482, 25613, 10382, 8717, 16186, 16153, -451, 10466, 12835, -2392, -76, 11333, -11559, 13620, 159, -9217, 123, 415, -532, 18038, -337, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.0001570466993143782, 0.00027472677174955606, 7.2843853558879346e-05, 0.00014759789337404072, 0.00018087399075739086, 0.00051420636009424925, 8.7642016296740621e-05, 0.00032954756170511246, 0.00027323528775013983, 0.00026927908766083419, 0.00028859503800049424, 0.0001812073023756966, 0.0001172899137600325, 0.000113056150439661, 0.00015941982564982027, 0.00013193856284487993, 0.00019794315448962152, 0.00027818174567073584, 0.00014975365775171667, 0.00043991304119117558, 0.00013030269474256784, 0.00022647649166174233, 0.00015764309500809759, 0.00014203703904058784, 0.0027663556393235922, 0.00015724822878837585, 0.00012820180563721806, 0.00011140824062749743, 0.00029811362037435174, 0.00015931052621454, 0.00017145114543382078, 0.00032137252856045961, 0.00011375622125342488, 0.0004139627271797508, 0.00012090996460756287, 0.0001819725293898955, 0.00028530525742098689, 0.00015844141307752579, 0.00024852729984559119, 0.00010058090265374631, 0.00048266121302731335, 9.2122943897265941e-05, 0.00019447252270765603, 8.4171158960089087e-05, 0.00028036045841872692, 0.00021812877093907446, 0.00012871874787379056, 0.0002387072890996933, 0.00019549464923329651, 0.00069528206950053573, 0.00031462986953556538, 0.00020723545458167791, 0.00011920660472242162, 0.0002552616351749748, 0.000362569116987288, 0.00023144070291891694, 9.8482094472274184e-05, 0.00028238134109415114, 0.00059849565150216222, 0.00025784460012800992, 0.00031833886168897152, 0.00029905713745392859, 0.00019231597252655774, 9.962836338672787e-05, 0.00016792220412753522, 0.00038513471372425556, 0.00015397652168758214, 0.00017890549497678876, 0.00018447657930664718, 0.00034515373408794403, 0.00019099480414297432, 0.00032899077632464468, 0.00026805049856193364, 0.00019678837270475924, 0.00010795136768138036, 0.00022205790446605533, 5.2594219596358016e-05, 0.00010667015885701403, 0.00016060168854892254, 0.00010829299571923912, 0.00011402030213503167, 0.00044166494626551867, 0.00011029962479369715, 0.00025580433430150151, 6.2203631387092173e-05, 0.00062895548762753606, 0.00012392560893204063, 0.00016201991820707917, 8.9768269390333444e-05, 0.00019242479174863547, 0.00012459409481380135, 0.000195980494027026, 0.00031022451003082097, 0.00013791168748866767, 0.00010469713743077591, 0.00023771128326188773, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ 2,-26,30,-14,100,-18,76,-17,-19,-15,-2,-25,-99,20,11,2,-1,1,-49,-21,13,36,28,67,-2,-28,-14,25,27,5,46,3,-10,13,49,-47,-3,-24,-51,11,20,-25,58,-44,-22,42,-42,-21,-26,11,-14,42,-86,17,54,-25,-37,-19,-3,-48,2,-39,-6,-65,-22,-40,-46,-38,-33,0,23,12,45,-8,26,9,9,17,127,-20,-59,5,-115,-4,12,-15,-30,62,-93,-3,9,-53,-17,64,-42,17, 29,23,89,-95,-24,1,69,-40,-9,-12,-26,16,-40,17,-58,88,4,55,16,-34,-24,127,63,122,34,-42,109,118,106,48,127,-26,-127,-18,-73,-47,-20,-28,127,-103,-3,-100,7,-79,25,-41,-30,-28,49,-8,32,95,-94,2,-36,-14,-91,-19,-15,-10,10,-120,-127,-50,-98,-18,-13,-70,-17,1,-70,127,-127,-7,8,-20,-127,-99,-23,-127,-127,1,-17,-85,127,69,-84,38,-127,12,32,-2,5,127,-52,-100, 24,0,38,-38,118,-19,49,-13,-31,4,-4,24,-65,14,12,-8,9,19,-32,-30,21,17,5,52,-4,-39,57,21,24,7,8,4,-16,7,21,64,7,-40,-44,-25,18,-10,75,-45,-36,-37,-31,-41,-11,-15,-21,4,22,-53,31,-29,81,-28,-1,-61,-3,-17,-49,-70,-55,-33,127,-27,-33,-3,88,24,29,-2,23,16,-83,86,-43,-8,-93,-17,-127,-37,33,-17,9,4,-114,-53,1,57,-2,52,0,12, 
  /* [0][1][][] */ -88,1,99,-39,57,94,-31,3,-11,-66,-12,-20,-127,48,41,93,-8,65,100,26,83,-4,86,-12,21,40,80,54,-16,9,-8,1,-59,-15,127,-17,6,-127,-89,-119,-3,-11,100,-50,-67,127,-127,-81,57,59,32,-72,-120,127,62,-40,-2,-38,21,-24,22,-16,68,-101,-50,31,-21,-47,-23,-6,-127,16,104,127,22,-49,-127,-82,-59,-90,-57,-12,-18,-85,75,18,-127,86,-103,127,102,-104,127,-17,-22,-16, 21,127,82,127,-127,-127,127,-44,127,127,-51,-59,-44,127,3,127,127,-127,127,127,127,-83,49,-127,-127,-127,127,127,-127,127,-38,127,-28,127,114,-113,127,34,15,-29,127,-11,-127,-127,127,-34,56,127,127,-127,127,-127,127,107,-127,127,-125,127,-127,127,-56,127,92,-127,107,127,-16,127,-119,-127,0,-102,-28,124,127,86,58,-127,90,-77,-15,127,90,127,126,46,-78,127,-23,46,-8,-7,-86,-26,-127,-35, -127,-43,127,-78,40,73,-65,11,-50,-46,10,127,-115,33,44,68,3,71,106,18,58,-5,38,6,23,48,78,40,3,8,-2,-2,-53,-28,120,127,8,-95,-105,-127,-2,-24,48,-46,-74,-95,-102,-121,38,70,0,-46,123,9,89,-47,127,-44,56,-60,11,-31,-98,-38,-87,-3,-55,-96,-23,-16,-109,19,71,-84,63,127,-102,-109,-46,-24,-100,-23,-62,-95,25,19,-101,111,-76,-86,127,127,-45,-24,-47,-33, 
  /* [0][2][][] */ -5,-47,36,-47,52,13,-6,12,-26,-7,46,-32,-26,-44,1,-21,-3,-13,-19,-33,29,-23,27,-34,3,-6,-20,-33,-8,8,-52,2,-37,1,33,-37,-5,-45,-20,-52,-14,-40,47,4,0,23,-67,-15,-37,5,-30,-33,9,-79,1,-31,-2,-32,-11,-34,8,14,-20,0,-44,-24,101,59,88,25,-2,2,-24,-35,-32,-24,-54,-14,-35,-112,-67,-5,-54,-28,-6,6,52,-33,-40,2,39,-50,-19,-10,-10,-2, -23,-58,41,-102,-31,-8,110,127,-78,46,127,-29,-46,28,127,102,-5,-56,64,-39,-9,-49,127,5,23,-35,22,-26,-15,19,-110,-48,-43,-27,-107,1,-84,-51,49,-108,-23,-127,-34,123,20,-20,-36,-11,7,6,-11,-43,71,-37,-51,-52,-65,-69,34,-81,127,22,114,1,-127,-67,-20,-49,127,31,-5,21,35,-49,37,-26,-33,-36,-6,16,-103,-14,-107,-68,61,-127,-28,20,-39,-6,34,-8,12,-117,-91,127, -29,26,39,-57,62,10,13,20,-32,-27,35,57,13,-49,10,-36,8,-11,13,-36,30,-16,18,0,-14,23,4,37,-10,17,-40,11,-40,-3,17,23,-2,-36,-32,-44,-9,-57,35,-17,1,-29,-88,-12,-37,2,-14,-53,10,-113,21,-22,62,-44,11,-30,0,21,-30,-24,-41,-14,-43,35,43,15,-12,17,-18,-52,-9,-26,-62,-8,87,-25,-46,-19,-49,-35,50,0,30,1,-6,13,30,17,-5,-13,-28,-6, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0066744848154485226, 0.011675887741148472, 0.0030958638526499271, 0.0062729101628065109, 0.0076871444471180439, 0.021853769198060036, 0.0037247857544571161, 0.014005770906805992, 0.011612499132752419, 0.011444360949099064, 0.012265289202332497, 0.0077013103291392326, 0.004984821192920208, 0.0048048864118754864, 0.0067753423936665058, 0.0056073889136314392, 0.0084125837311148643, 0.011822723783552647, 0.0063645304180681705, 0.01869630441069603, 0.0055378642864525318, 0.0096252504736185074, 0.0066998312249779701, 0.0060365740209817886, 0.11757011711597443, 0.0066830497235059738, 0.0054485765285789967, 0.0047348500229418278, 0.012669828720390797, 0.0067706969566643238, 0.0072866734117269516, 0.013658331707119942, 0.0048346393741667271, 0.017593415454030037, 0.0051386733539402485, 0.0077338325791060925, 0.012125473469495773, 0.0067337597720324993, 0.010562409646809101, 0.0042746881954371929, 0.020513100549578667, 0.0039152251556515694, 0.0082650817930698395, 0.0035772740375250578, 0.011915319599211216, 0.009270472452044487, 0.0054705468937754631, 0.010145059786736965, 0.0083085224032402039, 0.029549486935138702, 0.013371769338846207, 0.0088075064122676849, 0.0050662807188928127, 0.010848619043827057, 0.015409187413752079, 0.009836229495704174, 0.0041854889132082462, 0.012001206167042255, 0.025436064228415489, 0.010958394967019558, 0.013529401272535324, 0.012709927745163441, 0.008173428475856781, 0.0042342054657638073, 0.0071366936899721622, 0.01636822521686554, 0.0065440023317933083, 0.0076034832745790482, 0.0078402543440461159, 0.014669033698737621, 0.0081172790378332138, 0.013982107862830162, 0.011392145417630672, 0.0083635058254003525, 0.0045879329554736614, 0.0094374604523181915, 0.0022352542728185654, 0.0045334817841649055, 0.0068255718797445297, 0.0046024522744119167, 0.0048458627425134182, 0.018770759925246239, 0.0046877339482307434, 0.010871684178709984, 0.0026436543557792902, 0.026730608195066452, 0.0052668382413685322, 0.0068858461454510689, 0.0038151515182107687, 0.0081780534237623215, 0.0052952487021684647, 0.0083291707560420036, 0.013184541836380959, 0.0058612464927136898, 0.0044496282935142517, 0.010102729313075542, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 591, 6031, 63, 1753, 3242, 10320, 369, 1260, 12148, -891, 8541, 2849, 762, 506, 4735, 560, 3476, 2901, 173, 10820, 813, 10979, -881, 987, -7991, 963, 3279, 972, 6005, 806, 3694, 5554, 2238, 8050, 2750, 3415, 4864, 2074, 3075, 1835, 7692, 1123, 1229, 1358, 1980, 11712, 3009, 10105, 1251, -1351, 2186, 4911, 2288, -3442, 6245, 434, 1159, 9994, 1289, 1427, 2443, 13191, 3782, -407, 11521, 7833, 1944, 3461, 6578, 3467, 2873, 901, -3387, 4292, 2545, 2663, 224, 5693, 2460, 5194, 2662, 1830, 5329, 14375, -326, 7657, 2644, 2537, -1116, 2306, 592, 9861, 3283, 2059, 5937, 3759, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00037147005787119269, 0.00013404227502178401, 0.00036041362909600139, 0.00016460915503557771, 0.00018030352657660842, 8.7405438534915447e-05, 0.0002375424955971539, 0.0001715914550004527, 6.9806679675821215e-05, 0.00021448075131047517, 0.00010302361624781042, 0.00015836801321711391, 0.00031636600033380091, 0.00046043144538998604, 0.00010989986185450107, 0.00015456276014447212, 0.00015967515355441719, 0.00019917443569283932, 0.00011468283628346398, 7.3643583164084703e-05, 0.00026089552557095885, 6.512134859804064e-05, 0.00021210983686614782, 0.00022630393505096436, 8.9644825493451208e-05, 0.00018167159578297287, 0.00018558587180450559, 0.00026233401149511337, 0.00014774575538467616, 0.0002546678006183356, 0.00017418454808648676, 0.00010974354518111795, 0.00018768521840684116, 0.00010851778642972931, 0.00014921999536454678, 0.00019777729175984859, 0.000130341766634956, 0.00024748814757913351, 0.00015165004879236221, 0.0002234492712887004, 0.00011540673585841432, 0.00020992041390854865, 0.00026644373429007828, 0.00018585559155326337, 0.00016585685079917312, 7.6153504778631032e-05, 0.00018096718122251332, 8.3603910752572119e-05, 0.00024979561567306519, 0.0001879248593468219, 0.00022949160484131426, 0.00014396161714103073, 0.00024184044741559774, 0.00010251876665279269, 0.00012343771231826395, 0.00021594154532067478, 0.00019239071116317064, 8.7118860392365605e-05, 0.00013140190276317298, 0.00015088722284417599, 0.00014848780119791627, 7.0612077252008021e-05, 0.00016008139937184751, 0.00022916533634997904, 8.0823272583074868e-05, 0.00010586012649582699, 0.00024354130437131971, 0.0001993002078961581, 0.00011003798863384873, 0.00014320679474622011, 0.00018234453455079347, 0.00019716951646842062, 0.00014876133354846388, 0.00015415321104228497, 0.00017558412218932062, 0.00023606656759511679, 0.00020906479039695114, 0.00012167417298769578, 0.00022025704674888402, 0.00014550982450600713, 0.00018516775162424892, 0.0001300897856708616, 8.6389511125162244e-05, 6.7209381086286157e-05, 0.00015935862029436976, 8.6526306404266506e-05, 0.00025400996673852205, 0.00021900924912188202, 0.00017290834512095898, 0.0002469769970048219, 0.00029282711329869926, 9.2493217380251735e-05, 0.00016065062663983554, 0.00018497210112400353, 0.00010104786633746698, 0.00016412699187640101, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 56,-17,-4,53,-127,-29,65,28,56,89,-6,55,11,30,25,49, 
  /* [1][0][][] */ 11,-27,-101,24,106,127,6,4,-42,12,-48,37,-8,45,1,-38, 
  /* [2][0][][] */ -25,44,55,10,53,71,2,34,31,-14,38,-31,48,-127,2,5, 
  /* [3][0][][] */ 127,-44,46,-16,42,31,-21,-17,25,64,-59,-36,-66,80,-57,57, 
  /* [4][0][][] */ -81,-32,48,18,-104,30,-36,-35,-43,27,-33,-110,-23,-3,-22,127, 
  /* [5][0][][] */ -127,-35,32,25,114,25,76,4,-52,-6,-9,-21,-39,82,-66,-58, 
  /* [6][0][][] */ -127,27,-42,33,3,-66,75,23,-3,-42,-38,54,8,-4,-28,28, 
  /* [7][0][][] */ 32,114,73,-99,45,45,127,1,78,9,12,38,83,75,-39,-22, 
  /* [8][0][][] */ -48,-27,-71,70,-49,60,-69,-51,40,-52,62,59,126,93,-127,-1, 
  /* [9][0][][] */ 5,-127,-31,84,-10,-15,-11,61,14,32,27,46,-31,-32,-7,-6, 
  /* [10][0][][] */ 3,-51,-51,52,-84,57,35,-68,42,-58,29,-21,42,127,-95,32, 
  /* [11][0][][] */ -42,-120,-59,3,-1,32,8,-19,11,57,81,-61,23,127,-102,31, 
  /* [12][0][][] */ -16,-75,-70,80,-100,-127,16,25,68,73,-18,111,-15,-39,-3,-25, 
  /* [13][0][][] */ -74,-23,-52,-2,-17,12,37,18,-21,127,-17,-39,54,29,15,-10, 
  /* [14][0][][] */ -113,-38,-49,-76,-65,79,-15,-103,127,-72,51,-26,83,-36,-119,-99, 
  /* [15][0][][] */ 26,-127,119,-83,-47,-62,-11,52,35,-32,-113,-36,79,-23,-34,-64, 
  /* [16][0][][] */ -22,-25,13,-67,18,26,-33,-45,74,-127,54,-32,-46,-3,-84,-106, 
  /* [17][0][][] */ -39,-22,12,-39,3,8,-23,14,81,-86,74,29,126,-77,-39,-127, 
  /* [18][0][][] */ 86,-5,-32,-118,30,-25,124,-73,54,75,-21,39,-6,53,9,-127, 
  /* [19][0][][] */ -45,-43,-24,-81,-127,31,-47,1,40,-50,53,-86,-12,-49,-12,-10, 
  /* [20][0][][] */ 8,56,37,-68,53,14,-42,95,-98,-127,28,-90,-21,65,-5,10, 
  /* [21][0][][] */ -14,-126,-108,81,101,37,66,61,-119,-77,41,-19,94,-127,-53,-31, 
  /* [22][0][][] */ 37,9,86,-28,-18,15,59,48,1,127,38,66,-4,-3,114,7, 
  /* [23][0][][] */ -91,-64,5,29,19,28,-9,55,-43,33,-29,-94,38,14,69,127, 
  /* [24][0][][] */ 28,-12,36,47,-1,-85,-4,-43,11,127,-92,93,-19,-60,92,-77, 
  /* [25][0][][] */ 127,-26,102,108,40,-14,-4,1,-99,78,40,-34,-11,60,88,-32, 
  /* [26][0][][] */ -40,21,12,48,-60,119,-20,49,-73,-34,-79,20,2,28,37,-127, 
  /* [27][0][][] */ 22,-11,-16,-44,-42,21,-79,22,-99,-30,-77,-38,-63,31,-13,127, 
  /* [28][0][][] */ -44,25,11,-35,-1,-18,-127,7,0,-28,-26,-41,4,-70,-62,-29, 
  /* [29][0][][] */ -9,-109,-17,83,-32,3,113,14,63,65,-127,84,54,-26,-36,91, 
  /* [30][0][][] */ 23,-53,-74,30,-127,30,79,-42,26,-29,6,-18,-35,116,-30,66, 
  /* [31][0][][] */ -127,-14,-9,94,-24,-3,-43,-2,-53,-40,29,-38,-23,-54,-17,65, 
  /* [32][0][][] */ -125,-91,-105,-19,-106,-41,-9,-45,127,64,-43,-49,12,55,-5,-46, 
  /* [33][0][][] */ -21,3,-107,62,-120,-75,54,7,-127,-1,-65,-68,5,66,79,83, 
  /* [34][0][][] */ 34,79,-38,65,-60,-53,-3,43,13,-127,21,88,-47,-39,121,125, 
  /* [35][0][][] */ 30,-6,-45,-43,-127,-9,70,-32,46,63,-9,0,20,87,14,45, 
  /* [36][0][][] */ -12,7,-88,83,127,-15,33,88,-106,12,-70,-77,36,-25,26,41, 
  /* [37][0][][] */ -118,24,-21,-41,67,-91,-50,-7,-21,-18,-27,57,77,-49,0,-127, 
  /* [38][0][][] */ 62,109,32,-127,-40,-13,-111,-30,-17,-47,11,86,-75,-102,52,-7, 
  /* [39][0][][] */ 27,-47,-7,115,18,60,92,-40,-5,51,-21,-37,-27,127,79,119, 
  /* [40][0][][] */ 69,23,61,86,-50,-34,-23,36,-83,64,7,-39,-40,-33,127,-9, 
  /* [41][0][][] */ -38,-9,-8,80,-72,127,5,73,-73,3,-91,39,23,36,39,-119, 
  /* [42][0][][] */ 34,-99,28,-34,127,-3,60,-18,-29,-71,-103,-4,-10,-7,-44,-11, 
  /* [43][0][][] */ -40,-100,-45,-5,65,33,-8,53,-46,-88,-92,-127,68,-47,-29,24, 
  /* [44][0][][] */ -55,-76,-58,-89,38,79,70,6,-16,-115,-58,7,-49,35,25,127, 
  /* [45][0][][] */ 24,-112,-92,11,-127,85,-51,-57,34,-48,7,-48,37,-22,-6,66, 
  /* [46][0][][] */ 24,-108,-30,43,68,-70,14,62,0,-43,57,38,-26,-49,44,-127, 
  /* [47][0][][] */ -127,-48,-34,105,-39,14,26,24,-20,120,102,41,-49,91,-16,77, 
  /* [48][0][][] */ 33,-12,-78,-91,27,-65,-2,60,37,-71,1,24,-76,19,-57,-127, 
  /* [49][0][][] */ 48,34,27,-1,-26,-33,54,28,-25,127,-31,27,-44,-26,70,47, 
  /* [50][0][][] */ 18,-6,15,-11,-127,-8,-17,-36,61,33,28,56,-19,-75,14,4, 
  /* [51][0][][] */ 32,-3,8,-127,-26,69,47,-74,30,19,18,-34,42,96,-22,-23, 
  /* [52][0][][] */ 20,-28,-15,-43,66,-66,-2,-29,17,-15,127,-32,40,-4,-15,64, 
  /* [53][0][][] */ -32,-68,61,-40,-41,-120,19,-121,9,127,-114,77,-29,-41,54,-81, 
  /* [54][0][][] */ 33,91,65,-14,-127,-39,-65,-102,-52,-30,64,78,-90,-43,84,38, 
  /* [55][0][][] */ -7,0,-59,120,-44,33,87,-12,-37,127,52,51,11,-20,11,46, 
  /* [56][0][][] */ 63,-123,-103,96,-70,48,-5,42,127,-22,13,62,14,-3,96,111, 
  /* [57][0][][] */ 67,37,127,-66,92,36,-7,-4,66,-23,35,89,23,-75,80,-56, 
  /* [58][0][][] */ 107,-49,14,-80,71,29,-1,113,22,127,-36,90,44,9,94,7, 
  /* [59][0][][] */ -14,22,56,-29,0,-92,5,13,-2,17,-127,-82,-101,-45,41,-24, 
  /* [60][0][][] */ 90,-44,39,58,2,-38,61,-52,38,127,-1,80,30,-30,-1,-57, 
  /* [61][0][][] */ 71,58,-1,-75,-111,-127,-21,-50,-89,9,-29,6,-41,-72,100,112, 
  /* [62][0][][] */ -22,65,-48,69,-48,127,-27,24,-71,-13,-4,33,-24,14,61,-84, 
  /* [63][0][][] */ 20,-9,-82,-127,-44,-31,85,-14,-5,-102,-13,28,-30,54,21,-31, 
  /* [64][0][][] */ -24,50,23,-26,42,-81,5,96,-127,-4,-90,-57,-63,81,39,55, 
  /* [65][0][][] */ -52,-6,-14,-6,54,25,-64,-64,-127,-29,23,-9,-110,96,-65,40, 
  /* [66][0][][] */ -9,56,-35,37,-25,127,-28,26,-61,14,-25,33,-16,21,56,-61, 
  /* [67][0][][] */ 4,-21,-56,-16,52,-54,49,-51,-34,37,9,127,-45,1,-47,-67, 
  /* [68][0][][] */ 4,-127,-47,120,14,0,13,90,49,18,62,40,-43,30,-11,0, 
  /* [69][0][][] */ 22,61,124,-82,30,9,-39,73,33,126,59,54,85,-89,39,-127, 
  /* [70][0][][] */ 41,-15,49,-27,90,10,-66,-58,-127,-80,8,23,-27,82,-126,-34, 
  /* [71][0][][] */ -5,-63,25,-43,66,-8,27,15,-45,75,-127,-57,-22,85,-36,23, 
  /* [72][0][][] */ -12,-7,71,31,-23,-33,-36,-16,-30,31,-18,63,80,127,-115,15, 
  /* [73][0][][] */ 21,-59,-4,-66,39,-127,24,-75,78,109,100,-24,7,-27,-67,103, 
  /* [74][0][][] */ 11,0,-25,98,-62,-10,71,39,51,47,19,114,127,17,-41,22, 
  /* [75][0][][] */ -25,39,-15,31,-66,127,-31,22,-32,52,-38,41,-39,53,33,-76, 
  /* [76][0][][] */ -72,94,-83,41,-115,0,-27,32,58,17,-42,-40,56,-51,-127,61, 
  /* [77][0][][] */ 120,84,-127,83,64,80,56,42,40,5,86,-24,89,-14,72,10, 
  /* [78][0][][] */ 4,-51,-28,-37,57,-89,28,-27,25,34,127,-19,13,-31,-40,111, 
  /* [79][0][][] */ -46,100,26,13,-10,-78,-25,-26,-127,12,63,4,94,67,-101,-69, 
  /* [80][0][][] */ -113,46,82,48,98,47,0,-127,-79,45,-86,-86,-55,-93,-15,59, 
  /* [81][0][][] */ 89,69,-16,14,51,-32,54,127,-102,117,-72,-47,-29,28,111,118, 
  /* [82][0][][] */ 74,119,-21,-80,-28,-82,105,-85,50,34,-127,65,105,-11,63,-83, 
  /* [83][0][][] */ 6,-30,17,61,36,23,-37,-110,37,-28,114,56,70,-33,-72,-127, 
  /* [84][0][][] */ -85,-76,-48,-26,7,67,98,1,48,69,81,127,68,92,-71,20, 
  /* [85][0][][] */ 89,4,76,-32,72,-14,-32,87,8,127,-56,12,-14,69,70,34, 
  /* [86][0][][] */ -68,109,-35,-9,30,70,30,0,116,66,127,-28,-36,101,-17,-38, 
  /* [87][0][][] */ 0,-52,26,-48,53,-127,31,-27,42,-6,63,-36,33,-33,-49,74, 
  /* [88][0][][] */ -76,10,-3,9,102,-41,32,21,-91,-57,122,-52,79,90,110,-127, 
  /* [89][0][][] */ -25,26,-24,25,-23,127,-23,33,-52,21,-44,23,11,47,39,-90, 
  /* [90][0][][] */ 39,-62,23,16,82,12,49,38,-10,-81,-127,-37,-7,5,-86,34, 
  /* [91][0][][] */ -1,27,-38,-1,46,-60,-109,35,-35,-3,-127,-102,-58,-64,43,54, 
  /* [92][0][][] */ 63,41,67,2,-127,-71,31,-4,-28,35,-29,-20,-32,-71,-12,-12, 
  /* [93][0][][] */ -7,-127,-116,64,-32,-43,-1,94,86,50,24,55,-61,60,16,-27, 
  /* [94][0][][] */ 108,-5,107,-23,14,-55,17,30,21,92,15,56,18,-1,127,-18, 
  /* [95][0][][] */ -85,-65,-16,-43,127,-25,64,85,-52,-34,-118,-58,34,50,-105,35, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0065449103713035583, 0.0023616834077984095, 0.0063501079566776752, 0.0029002395458519459, 0.0031767578329890966, 0.0015399915864691138, 0.0041852481663227081, 0.003023260273039341, 0.0012299199588596821, 0.0037789244670420885, 0.0018151673721149564, 0.0027902773581445217, 0.0055740349926054478, 0.0081123160198330879, 0.0019363196333870292, 0.0027232326101511717, 0.0028133078012615442, 0.0035092432517558336, 0.0020205904729664326, 0.0012975222198292613, 0.0045967036858201027, 0.0011473693884909153, 0.0037371513899415731, 0.0039872364141047001, 0.0015794471837580204, 0.0032008618582040071, 0.0032698272261768579, 0.004622048232704401, 0.0026031243614852428, 0.0044869780540466309, 0.0030689479317516088, 0.0019335654797032475, 0.0033068154007196426, 0.0019119688076898456, 0.0026290987152606249, 0.0034846272319555283, 0.0022964843083173037, 0.0043604797683656216, 0.0026719137094914913, 0.0039369403384625912, 0.0020333449356257915, 0.0036985762417316437, 0.0046944571658968925, 0.0032745792996138334, 0.0029222227167338133, 0.0013417443260550499, 0.0031884508207440376, 0.0014730127295479178, 0.0044011352583765984, 0.0033110377844423056, 0.0040433998219668865, 0.0025364516768604517, 0.0042609735392034054, 0.0018062724266201258, 0.0021748421713709831, 0.0038046620320528746, 0.0033897212706506252, 0.001534942421130836, 0.0023151629138737917, 0.0026584735605865717, 0.0026161982677876949, 0.0012441102880984545, 0.0028204652480781078, 0.0040376512333750725, 0.0014240207383409142, 0.0018651436548680067, 0.0042909407056868076, 0.0035114593338221312, 0.0019387531792744994, 0.0025231526233255863, 0.0032127182930707932, 0.0034739188849925995, 0.0026210176292806864, 0.0027160169556736946, 0.0030936067923903465, 0.0041592437773942947, 0.0036835009232163429, 0.0021437704563140869, 0.0038806966040283442, 0.0025637296494096518, 0.0032624604646116495, 0.0022920446936041117, 0.0015220920322462916, 0.0011841583764180541, 0.0028077308088541031, 0.0015245021786540747, 0.0044753872789442539, 0.0038587118033319712, 0.00304646254517138, 0.0043514738790690899, 0.0051593044772744179, 0.0016296328976750374, 0.0028304944280534983, 0.0032590131741017103, 0.0017803567461669445, 0.0028917442541569471, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -8459, 11002, -20354, 6304, 14654, -13208, -40485, -8070, -6213, 5290, -13374, -12543, 6908, -11010, -613, -1849, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 9.9260636488907039e-05, 0.00013020195183344185, 0.0001009544575936161, 0.00018418775289319456, 7.946023833937943e-05, 0.00013680347183253616, 9.2789436166640371e-05, 0.0001593553606653586, 5.6074164604069665e-05, 8.8475615484640002e-05, 0.00016743138257879764, 0.00011772308789659292, 0.00011708684905897826, 8.9368229964748025e-05, 0.00013355084229260683, 0.00015402761346194893, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 36,38,41,-41,64,58,-42,67,-9,125,1,42,-17,38,4,36,22,77,40,-60,-60,99,-7,55,58,51,28,47,-54,-51,-15,91,-51,7,-65,64,48,-127,-35,16,21,-34,84,13,-10,-46,-58,-15, 
  /* [1][0][][] */ -48,9,-85,-43,11,90,-73,19,-7,-15,-50,32,55,-10,-30,-24,-37,-46,-6,31,-59,51,-103,-44,-53,-37,45,65,-25,-27,36,-48,5,-61,-38,54,16,-61,127,-41,-21,35,-47,-15,41,47,35,16, 
  /* [2][0][][] */ -11,-3,54,-35,-10,-82,28,41,119,69,-33,36,104,-12,127,86,-114,-16,-23,25,104,-85,-54,-77,11,-34,32,-65,66,57,-21,28,17,-21,59,41,-61,7,-5,-40,22,36,80,-34,7,-77,92,-75, 
  /* [3][0][][] */ 38,19,-38,-27,20,101,5,-8,31,-48,9,-26,-45,-2,17,40,-42,-73,36,-127,-16,-14,-31,-6,-52,81,115,62,-5,-34,17,59,54,-32,86,27,-46,-56,-2,29,10,0,-11,-9,25,20,-10,-22, 
  /* [4][0][][] */ 93,-17,1,-52,93,88,56,6,51,-16,-101,24,38,-22,24,-14,-85,-121,-10,-106,-21,7,-40,-30,-101,118,-89,127,-51,-62,32,89,30,-52,19,-30,-5,10,-21,29,-62,-22,-7,40,-77,123,-31,-71, 
  /* [5][0][][] */ -1,-1,-73,3,-21,59,20,-21,53,48,44,97,41,-18,29,-6,-36,127,-15,35,13,-6,-74,-7,31,-4,-54,-39,-11,41,25,-19,-38,8,40,4,-62,4,-82,3,89,-31,25,37,-22,11,-43,30, 
  /* [6][0][][] */ 59,10,13,63,14,-27,110,-45,-3,52,124,94,47,32,-61,74,55,-44,-75,96,44,-56,-36,58,-70,86,107,-14,112,34,-37,3,127,-79,-126,14,120,23,-7,-8,3,61,58,-43,49,107,43,8, 
  /* [7][0][][] */ -85,4,-45,31,-61,-41,20,43,59,110,-40,-68,-89,9,-20,-21,-49,98,11,109,-38,34,13,31,-16,-95,-24,-78,32,42,5,3,-26,15,29,-21,-2,-56,127,10,4,32,18,-4,53,78,-37,-8, 
  /* [8][0][][] */ -1,-83,67,-74,60,-64,58,-34,-41,-111,20,-1,-20,-8,39,38,4,0,-53,113,10,59,2,20,76,-30,-68,-18,-127,-42,-78,-102,-4,-74,-8,103,9,29,107,2,3,-8,78,114,-14,-79,-27,104, 
  /* [9][0][][] */ 9,-29,24,-44,34,73,-30,58,12,-23,-44,7,24,-43,106,-2,0,-114,46,37,-85,47,37,-52,-18,-53,-26,57,60,67,-46,-13,-43,30,-19,127,-13,-46,-53,-31,-22,-4,40,87,48,69,-63,10, 
  /* [10][0][][] */ -18,21,-18,-3,27,24,-61,-38,50,23,55,-6,-41,-6,53,-45,-63,127,-3,43,-6,-16,19,42,-52,45,-4,99,28,6,-35,-4,95,8,-14,28,-11,-51,-52,23,-77,-3,20,-23,21,46,22,28, 
  /* [11][0][][] */ -31,46,-25,40,28,68,-6,13,17,26,-127,-74,80,17,-11,-44,-5,24,-44,-50,-5,-5,110,3,49,7,-27,42,18,27,-14,64,26,-9,-41,3,48,77,100,13,27,-31,68,-3,-52,-9,81,0, 
  /* [12][0][][] */ -56,13,25,26,-52,-44,-7,10,-42,-39,-127,-6,61,-91,32,28,51,96,87,-120,-29,39,-18,-66,-9,-23,27,-21,1,2,-17,69,73,76,36,-29,-51,-31,31,5,-40,15,57,-1,35,-15,-32,-35, 
  /* [13][0][][] */ -56,-118,-33,-96,25,31,67,-1,-102,22,111,-60,61,27,95,10,124,22,-15,-86,72,-69,127,-23,-63,2,-17,3,-24,-103,-124,22,51,-21,-71,67,33,-57,76,-82,3,60,59,54,55,-29,98,-56, 
  /* [14][0][][] */ 62,20,-59,6,-33,18,-98,-19,-35,66,43,41,-6,-66,16,-44,56,-121,14,17,67,-45,13,-7,-4,127,-98,2,-57,-18,-93,-3,126,32,83,-18,-73,5,-30,65,-19,-46,99,-7,-36,-53,-51,68, 
  /* [15][0][][] */ -60,32,41,16,87,-4,1,34,22,92,-31,57,61,-22,-26,-23,5,32,7,-34,32,-34,-66,-70,48,-70,-41,62,-56,18,12,-7,-61,7,127,2,-99,15,64,-4,-39,-22,20,-9,-43,-39,-15,5, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.004218576941639185, 0.0055335829965770245, 0.004290564451366663, 0.0078279795125126839, 0.0033770601730793715, 0.0058141476474702358, 0.0039435508660972118, 0.0067726029083132744, 0.0023831520229578018, 0.0037602134980261326, 0.0071158339269459248, 0.0050032311119139194, 0.0049761910922825336, 0.0037981497589498758, 0.005675910972058773, 0.0065461732447147369, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 12935, 212, 20620, 998, 17009, 437, 35631, 274, 10612, 58952, 10283, 31817, -308, 11153, 41321, 39010, 1454, 5718, 3965, 51292, 1016, 19910, 81, 14852, 15284, 38069, -857, 322, -9201, 21735, 17741, -579, -472, -266, 2284, 13170, 7032, 29977, -71, 18645, 24112, 952, 35, 13599, 3228, 4850, 43241, 26304, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.1323152699042112e-05, 0.0001515323092462495, 6.3173312810249627e-05, 7.5380718044470996e-05, 8.277845336124301e-05, 6.4387968450319022e-05, 6.8087691033724695e-05, 0.00033042396535165608, 0.00014693205594085157, 3.0683728255098686e-05, 4.6856443077558652e-05, 8.2826081779785454e-05, 8.6026462668087333e-05, 0.00011751562124118209, 4.2681804188759997e-05, 4.5697412133449689e-05, 0.00013876320736017078, 4.9897782446350902e-05, 0.00012560001050587744, 4.1757753933779895e-05, 7.2713752160780132e-05, 4.7952973545761779e-05, 0.00011780439672293141, 0.00011782474030042067, 5.7229284720961004e-05, 6.1081474996171892e-05, 6.9417808845173568e-05, 4.655238808481954e-05, 0.00016836701252032071, 7.9250596172641963e-05, 9.6323637990280986e-05, 0.00020498118828982115, 0.00023263231560122222, 0.00015889736823737621, 7.191794429672882e-05, 7.5518000812735409e-05, 9.5188595878425986e-05, 6.0125996242277324e-05, 9.0609690232668072e-05, 0.00011060151882702485, 5.7285509683424607e-05, 0.00016240024706348777, 0.00038451587897725403, 9.6012227004393935e-05, 0.00015424242883455008, 4.9223523092223331e-05, 4.036946120322682e-05, 8.143646118696779e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -127,78,-127,121,-117,68,-60,66,-13,-110,57,-91,70,-69,-82,-96,70,85,88,-127,122,-102,65,-113,-92,-63,58,127,-80,-80,-56,99,78,-95,58,-73,-91,-82,90,-32,-21,-68,80,-70,96,56,-73,-77, -117,112,-81,127,-87,101,-43,14,-62,-90,87,-71,85,-94,-68,-127,121,109,127,-110,103,-127,100,-127,-124,-65,62,104,81,-101,-83,71,105,-127,87,-127,-106,-101,114,-89,-104,118,80,-64,-34,105,-92,-103, -63,40,-34,55,-43,77,-38,22,-38,-44,44,-59,32,-35,-28,-54,64,49,52,-69,36,-48,32,-58,-103,-30,25,33,118,-57,-43,36,48,-101,40,-50,16,-51,59,-64,-127,-38,47,-45,-100,81,-42,-77, 
  /* [0][1][][] */ -43,105,-67,123,-65,109,-127,114,-104,-124,75,-127,90,-127,-106,-111,93,101,-50,-106,127,-81,87,-76,-64,-95,86,118,-122,-109,-80,127,96,30,90,-63,-59,-104,101,-54,-77,-120,78,-127,127,63,-127,-127, -108,127,-82,123,-127,127,-117,127,-127,-127,127,-117,127,-113,-127,-126,127,127,-52,-99,96,-127,127,-75,-127,-127,127,102,65,-127,-127,102,127,36,127,-100,-127,-127,127,-127,-90,127,127,-87,-51,127,-101,-114, -67,71,-62,74,-54,69,-62,79,-85,-40,37,-67,26,-71,-42,-44,85,59,-56,-36,40,-36,-2,-20,-85,-58,50,53,127,-63,-61,106,75,18,45,-36,29,-36,68,-55,-19,-64,27,-2,-117,95,-33,-88, 
  /* [0][2][][] */ -45,63,-28,53,-47,48,-79,-2,-28,-106,39,-94,53,-106,-53,-93,76,53,-82,-26,39,-75,47,-43,-52,-58,62,25,-109,-111,-16,54,63,63,52,-53,-99,-12,58,-39,-73,-51,8,-103,85,49,-79,-2, -78,71,-62,49,-112,53,-84,-26,-73,-95,38,-89,52,-56,-80,-124,83,60,-106,-28,18,-54,62,-45,-96,-59,65,38,19,-97,-38,92,86,86,69,-64,-73,-29,50,-93,-75,76,37,-92,-31,97,-71,-13, -26,60,-78,28,-27,13,-64,-8,-37,-14,27,-82,11,-41,-13,-35,37,21,-63,-12,26,-50,-1,19,-26,-47,23,18,72,-26,-8,80,47,65,34,-11,62,10,27,-23,3,-45,-20,17,-75,68,-37,-78, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0034562337677925825, 0.0064401230774819851, 0.0026848658453673124, 0.0032036805059760809, 0.0035180840641260147, 0.0027364885900169611, 0.0028937268070876598, 0.014043018221855164, 0.0062446123920381069, 0.0013040584744885564, 0.0019913988653570414, 0.0035201082937419415, 0.0036561244633048773, 0.0049944138154387474, 0.0018139766762033105, 0.0019421399338170886, 0.0058974362909793854, 0.0021206557285040617, 0.0053380005992949009, 0.0017747045494616032, 0.0030903343576937914, 0.0020380013156682253, 0.0050066867843270302, 0.0050075515173375607, 0.0024322445970028639, 0.0025959627237170935, 0.0029502569232136011, 0.0019784765318036079, 0.0071555981412529945, 0.0033681502100080252, 0.0040937545709311962, 0.008711700327694416, 0.0098868729546666145, 0.0067531378008425236, 0.0030565126799046993, 0.0032095150090754032, 0.0040455153211951256, 0.0025553547311574221, 0.0038509117439389229, 0.0047005643136799335, 0.0024346341378986835, 0.0069020106457173824, 0.016341924667358398, 0.0040805195458233356, 0.0065553029999136925, 0.0020919996313750744, 0.0017157020047307014, 0.0034610494039952755, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 1056, -1228, 269, -1673, 3004, -901, 3540, -2568, 1075, 373, 2498, 2809, 467, -588, 732, 4137, -2037, 3344, 3389, 979, -547, 2104, -410, 3970, 1707, 1594, 1235, -886, 7184, 57, 3019, -1517, -1387, 3629, -596, 2225, 1869, 1387, 331, 4101, 1277, 7590, -3684, 1685, 9117, -335, 2222, 2907, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00039191808900795877, 0.00030839361716061831, 0.00036745902616530657, 0.00024010833294596523, 0.00024576167925260961, 0.00021220951748546213, 0.00020072613551747054, 0.00019062297360505909, 0.00035517342621460557, 0.00042385005508549511, 0.00018094079860020429, 0.00025373848620802164, 0.00040427022031508386, 0.00028557353653013706, 0.00026273573166690767, 0.00018986671057064086, 0.00027707195840775967, 0.00023170671192929149, 0.00022498931502923369, 0.00029405421810224652, 0.0005029863677918911, 0.00027133134426549077, 0.00028346580802462995, 0.00020258991571608931, 0.00023988241446204484, 0.00029830553103238344, 0.00027581091853789985, 0.00030644069192931056, 0.00012103775952709839, 0.00030183338094502687, 0.00017146053141914308, 0.000201471644686535, 0.00020780140766873956, 0.00021460934658534825, 0.00033377535874024034, 0.00023339198378380388, 0.00025100616039708257, 0.00022881269978825003, 0.00034088996471837163, 0.00020533971837721765, 0.00033835635986179113, 0.00011618116695899516, 0.00013701310672331601, 0.00026346830418333411, 0.00010332987585570663, 0.00022719166008755565, 0.00023629057977814227, 0.0002204453048761934, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 69,23,127,-28,75,102,-56,-54, 
  /* [1][0][][] */ 10,-74,-127,14,48,22,7,8, 
  /* [2][0][][] */ -127,-5,-49,-11,63,25,-50,-29, 
  /* [3][0][][] */ 31,71,127,-74,2,-105,15,-24, 
  /* [4][0][][] */ -127,27,-53,-30,42,17,-32,-65, 
  /* [5][0][][] */ -127,28,-56,2,10,55,-100,-122, 
  /* [6][0][][] */ -33,-127,-107,46,91,24,-12,43, 
  /* [7][0][][] */ -59,-127,-72,-76,-66,-62,19,50, 
  /* [8][0][][] */ 98,28,-23,-11,85,-79,-127,-4, 
  /* [9][0][][] */ -31,46,-52,88,-62,-30,127,-40, 
  /* [10][0][][] */ -12,116,30,60,127,-41,6,44, 
  /* [11][0][][] */ -78,-40,-34,-12,-90,112,127,-3, 
  /* [12][0][][] */ 67,24,-127,28,-15,-26,-72,-16, 
  /* [13][0][][] */ 67,-39,-63,-10,-1,-127,-41,-20, 
  /* [14][0][][] */ 20,-87,97,30,127,-104,-57,19, 
  /* [15][0][][] */ -46,-33,-5,127,54,51,-55,22, 
  /* [16][0][][] */ 110,43,-19,12,42,-127,-106,-37, 
  /* [17][0][][] */ 49,127,53,74,43,59,23,-79, 
  /* [18][0][][] */ 29,-18,-11,-8,127,-3,14,-5, 
  /* [19][0][][] */ 15,95,26,9,-127,24,7,-23, 
  /* [20][0][][] */ -35,4,62,-127,32,24,-13,90, 
  /* [21][0][][] */ -44,72,45,-110,41,36,21,127, 
  /* [22][0][][] */ -62,-46,-94,-3,-127,109,88,-21, 
  /* [23][0][][] */ 127,27,-127,6,8,-44,-90,-10, 
  /* [24][0][][] */ -47,55,18,-31,-9,87,-127,119, 
  /* [25][0][][] */ -126,-68,-127,24,-52,-103,85,106, 
  /* [26][0][][] */ 62,-15,-32,-30,112,-12,127,-28, 
  /* [27][0][][] */ 127,-70,28,91,1,28,-26,114, 
  /* [28][0][][] */ 31,57,62,21,127,-44,65,-43, 
  /* [29][0][][] */ -5,-33,-66,-58,-91,29,127,-46, 
  /* [30][0][][] */ 32,-78,-59,-67,-127,-16,28,-35, 
  /* [31][0][][] */ 3,31,1,0,-127,3,-20,-8, 
  /* [32][0][][] */ 37,-40,-22,80,-25,-127,114,-125, 
  /* [33][0][][] */ 54,127,43,38,56,-27,-16,-27, 
  /* [34][0][][] */ -111,-33,127,-6,-48,89,79,13, 
  /* [35][0][][] */ -44,103,127,3,-62,-65,-24,55, 
  /* [36][0][][] */ -120,3,101,-8,-11,127,85,28, 
  /* [37][0][][] */ -11,-79,-2,-127,-45,-89,52,31, 
  /* [38][0][][] */ 35,-15,97,-60,43,49,-127,9, 
  /* [39][0][][] */ -1,109,-127,-44,-41,-23,27,73, 
  /* [40][0][][] */ 66,-63,7,48,20,13,24,127, 
  /* [41][0][][] */ -44,85,127,-7,11,87,-87,46, 
  /* [42][0][][] */ 72,-127,-113,-35,-115,-3,15,-76, 
  /* [43][0][][] */ -14,-80,15,-68,127,-53,30,39, 
  /* [44][0][][] */ -15,117,127,20,9,59,-89,33, 
  /* [45][0][][] */ -39,56,14,82,-127,57,-119,18, 
  /* [46][0][][] */ -76,-44,112,92,-127,-113,-52,-7, 
  /* [47][0][][] */ -14,54,31,-119,-127,54,-9,58, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0041825547814369202, 0.0032911805901676416, 0.0039215274155139923, 0.0025624390691518784, 0.0026227717753499746, 0.0022647026926279068, 0.0021421518176794052, 0.002034330740571022, 0.0037904153577983379, 0.0045233331620693207, 0.0019310024799779058, 0.0027079002466052771, 0.0043143769726157188, 0.0030476443935185671, 0.0028039189055562019, 0.0020262598991394043, 0.0029569154139608145, 0.0024727769196033478, 0.0024010888300836086, 0.0031381503213196993, 0.0053678769618272781, 0.0028956516180187464, 0.0030251506250351667, 0.002162042073905468, 0.0025600281078368425, 0.0031835203990340233, 0.0029434575699269772, 0.0032703387551009655, 0.0012917164713144302, 0.0032211695797741413, 0.0018298289505764842, 0.0021501078736037016, 0.0022176592610776424, 0.0022903135977685452, 0.003562054829671979, 0.0024907621555030346, 0.0026787407696247101, 0.002441891934722662, 0.0036379820667207241, 0.0021913880482316017, 0.0036109432112425566, 0.0012398868566378951, 0.001462205545976758, 0.0028117371257394552, 0.0011027377331629395, 0.0024245921522378922, 0.0025216960348188877, 0.0023525950964540243, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 2410, -1016, 21626, -9647, 6358, -15867, 4428, -13364, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00010951422154903412, 9.3542344984598458e-05, 0.00016648211749270558, 9.9829761893488467e-05, 0.00012838853581342846, 0.00018521455058362335, 6.2998136854730546e-05, 9.255109034711495e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -31,-42,-2,-74,-3,2,76,94,-85,-78,-27,15,-35,-6,-51,41,-70,17,10,127,49,-16,-21,92,59,68,23,-7,-84,-61,-67,-62,-54,105,23,-64,20,-36,96,14,41,34,-17,-83,35,-39,-26,-81, 
  /* [1][0][][] */ -18,61,-29,-26,-73,53,-21,-74,-30,72,-21,-5,48,39,-42,12,-21,-122,71,-51,126,29,-50,28,52,-9,-75,72,39,-15,90,32,-23,-28,-3,-10,-4,107,0,-33,74,43,-8,2,127,18,-31,64, 
  /* [2][0][][] */ -17,-26,108,15,88,-42,-17,19,-32,2,-4,25,7,-32,-47,-127,-46,-98,-20,15,-100,31,-34,-34,-42,19,7,-44,-38,10,-27,-23,-8,-2,10,3,10,-19,-55,14,47,-24,17,-40,-30,-45,-50,-53, 
  /* [3][0][][] */ 43,21,81,36,7,-42,32,74,-49,-31,53,-23,-66,24,-41,72,87,53,-38,18,-118,-52,127,1,10,6,-62,-45,-44,68,122,-82,17,-123,-41,27,-3,-84,-25,95,-72,-68,90,11,-101,-71,56,-5, 
  /* [4][0][][] */ 29,-12,73,-38,2,-2,-9,-14,-50,-25,-31,-4,39,-57,42,-99,36,41,-4,-41,11,30,18,20,-2,-5,60,-19,26,20,-127,-18,-17,-23,8,27,38,-4,42,4,-48,-16,-82,27,-27,-87,11,24, 
  /* [5][0][][] */ 22,-52,43,31,31,12,29,7,-79,13,-41,32,34,13,11,-35,89,68,1,-12,73,-52,127,-84,-3,44,13,40,9,13,-25,-33,-18,-44,-20,9,40,23,59,-4,-80,35,36,19,54,-11,66,-8, 
  /* [6][0][][] */ -74,47,-127,89,21,9,48,28,-24,-25,55,-76,-100,-33,-26,38,-88,32,-13,93,16,38,-103,-94,-1,-20,26,70,-33,-66,-53,17,54,62,-62,-49,4,-14,73,27,67,50,-116,-65,-27,106,-68,-35, 
  /* [7][0][][] */ 44,80,-108,2,12,60,110,92,48,98,-123,-15,-39,22,-72,-60,43,31,112,106,58,7,119,32,127,105,-49,103,-94,28,10,-86,35,-83,-47,-2,-35,100,-33,89,-93,95,-21,-87,85,-27,81,-62, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.00465435441583395, 0.0039755497127771378, 0.0070754899643361568, 0.0042427647858858109, 0.0054565127938985825, 0.0078716184943914413, 0.0026774208527058363, 0.0039334213361144066, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 184, 24463, -764, -1453, 2888, -1532, 7273, 2411, -4045, 7, -7559, -47, -252, -1239, -4500, 7185, 8037, -208, -527, -7987, -8129, 907, 26429, -4857, -5456, -96, 5388, -3973, -228, 598, -6719, 8551, 7645, -223, 2461, 210, -11, -227, 11274, 4137, 5915, -1833, 9078, 6867, 91, 10447, 3416, -5658, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.0002972345391754061, 8.1620535638649017e-05, 0.00083022314356639981, 0.00032582500716671348, 0.00022698240354657173, 0.00019947145483456552, 0.00015651425928808749, 0.00035279491567052901, 7.1254842623602599e-05, 0.00028681717230938375, 0.00021620660845655948, 0.0018650798592716455, 0.00056183087872341275, 0.00055388204054906964, 0.00028734671650454402, 0.00056672526989132166, 0.00018177957099396735, 7.0799716922920197e-05, 0.00020707907970063388, 0.00021642757928930223, 0.00024314313486684114, 0.00019522868387866765, 7.120489317458123e-05, 0.00049217924242839217, 0.00022529676789417863, 0.00051984161837026477, 0.00057914468925446272, 0.00030099067953415215, 0.00038760900497436523, 0.0006242026574909687, 0.00020630209473893046, 0.00012570241233333945, 0.00011069502215832472, 0.00020661238522734493, 0.00021334625489544123, 0.00032087709405459464, 0.0030997311696410179, 0.00027106437482871115, 0.00011683045158861205, 0.00024775209021754563, 0.00017203977040480822, 0.00019753840751945972, 0.00023436026822309941, 0.00018209309200756252, 0.00041538293589837849, 8.0213474575430155e-05, 7.9503297456540167e-05, 0.00020039267838001251, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 5,-108,9,6,-32,-127,-61,38,-28,10,-6,10,37,-8,0,0,92,9,20,18,9,-25,-93,21,-2,-18,3,-19,-65,75,-21,-69,31,3,-15,-82,-4,-49,2,-49,-10,23,2,-8,-34,65,122,-15, -127,-111,-22,127,-81,68,-110,113,34,20,33,2,34,21,3,-41,-27,74,28,16,23,127,15,127,126,-33,-37,15,57,-127,-11,-51,40,-9,-58,-127,24,33,-61,-38,-127,-21,-81,-126,27,56,42,127, -15,-21,12,3,-42,23,28,25,12,-34,6,10,-25,-6,1,4,-89,30,-66,-19,-21,-31,127,16,-43,8,11,13,10,44,8,48,-13,-6,-46,67,9,19,19,67,35,-27,22,-39,-26,22,-32,-4, 
  /* [0][1][][] */ -30,-103,-25,9,14,-117,97,-14,-9,29,19,32,127,12,12,-41,-46,-56,23,63,76,-79,47,12,-49,127,-73,-27,127,-93,44,-127,-69,1,-71,18,8,-82,-52,2,116,127,-24,-127,-58,-57,-31,116, 106,-127,127,9,127,91,-87,-82,59,127,127,-127,-98,127,127,127,127,102,127,127,127,105,20,10,127,-101,-127,66,29,122,127,24,-127,127,127,124,-127,127,-127,-127,63,38,-127,-34,127,-127,-37,81, 43,21,-38,3,-63,121,-127,52,106,-72,15,58,-26,13,24,-71,2,-9,-116,29,13,-121,-48,-13,67,-5,-27,127,-77,-35,33,-32,-32,15,80,-7,34,4,0,-113,116,-4,7,-1,-52,78,127,-65, 
  /* [0][2][][] */ -18,-39,6,-26,-14,-59,-33,0,5,12,0,1,-5,-14,7,-13,-73,24,11,-12,10,-22,65,-7,-70,-4,44,-27,18,-8,-8,12,-15,-6,-58,49,-3,-33,16,7,-35,14,-29,20,-20,25,-57,31, 37,-48,-35,-26,28,52,95,-127,127,-39,9,5,-72,-21,-8,-77,-24,127,2,48,5,47,-38,-26,-57,48,65,-20,-85,8,-37,-56,-27,-3,-39,-5,52,-38,-9,102,-119,6,-36,73,43,68,-19,-110, -1,5,5,-15,-12,3,-23,-78,-28,-24,1,-3,32,-12,5,5,42,59,-14,-10,2,-15,-70,-12,24,-26,14,-12,-7,-2,-9,-20,20,-11,-49,-51,-7,1,35,-10,-18,-22,-18,18,-16,25,51,-11, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.012632467783987522, 0.0034688727464526892, 0.035284481942653656, 0.013847562484443188, 0.0096467519178986549, 0.0084775369614362717, 0.006651856005191803, 0.014993784017860889, 0.0030283308587968349, 0.012189729139208794, 0.0091887805610895157, 0.079265892505645752, 0.023877812549471855, 0.023539986461400986, 0.012212235480546951, 0.024085823446512222, 0.0077256313525140285, 0.0030089879874140024, 0.0088008604943752289, 0.0091981720179319382, 0.010333582758903503, 0.0082972189411520958, 0.003026207908987999, 0.020917616784572601, 0.0095751127228140831, 0.022093268111348152, 0.024613648653030396, 0.012792103923857212, 0.016473382711410522, 0.026528613641858101, 0.0087678385898470879, 0.005342352669686079, 0.0047045382671058178, 0.008781026117503643, 0.0090672159567475319, 0.013637276366353035, 0.1317385733127594, 0.011520235799252987, 0.0049652941524982452, 0.010529463179409504, 0.0073116901330649853, 0.0083953822031617165, 0.0099603114649653435, 0.0077389562502503395, 0.017653774470090866, 0.0034090725239366293, 0.0033788902219384909, 0.0085166888311505318, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2736, 8322, 16130, 1085, 3897, -1086, 8238, 8905, 6301, -580, 3042, -2166, 35106, -1065, 2823, 29158, -264, 2695, 164, 4612, 3811, 3984, 821, 20365, 8943, 4209, 16076, 1907, 6946, 7416, 514, 1251, 1174, 1299, -532, 443, -3545, -556, 2598, 1797, 4416, 2446, 6455, 3855, 4947, 3833, 2917, 6511, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00021215695596765727, 0.00010278376430505887, 5.619984949589707e-05, 0.00022413169790524989, 0.0001518034259788692, 0.00027019891422241926, 9.9926910479553044e-05, 9.4989001809153706e-05, 9.6869334811344743e-05, 0.00021910661598667502, 0.00024694146122783422, 0.00019701299606822431, 2.9900173103669658e-05, 0.00029860981157980859, 0.0001941329101100564, 3.8841866626171395e-05, 0.00033251874265260994, 0.00018384026770945638, 0.00026694068219512701, 0.0001613104686839506, 0.00019532896112650633, 0.00017175111861433834, 0.00036014628130942583, 5.3063122322782874e-05, 0.00010416423174319789, 0.00013443683565128595, 6.4394342189189047e-05, 0.00023820143542252481, 0.00011357841867720708, 0.00010983127867802978, 0.00050840817857533693, 0.00033618253655731678, 0.00025982630904763937, 0.0002204178599640727, 0.00030006802990101278, 0.00026830029673874378, 0.00015938434808049351, 0.00028170939185656607, 0.00019094195158686489, 0.00024698337074369192, 0.0001694495149422437, 0.00019860354950651526, 0.00013594220217783004, 0.00020805741951335222, 0.0001650854101171717, 0.00020528204913716763, 0.00025595503393560648, 0.00013587471039500087, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 57,127,-71,-79,34,91,37,43, 
  /* [1][0][][] */ 46,-75,46,-127,-70,72,-116,-31, 
  /* [2][0][][] */ -46,127,114,50,111,-12,54,22, 
  /* [3][0][][] */ 76,50,-72,54,-27,-90,-127,-23, 
  /* [4][0][][] */ -75,58,39,-51,-62,119,127,47, 
  /* [5][0][][] */ 10,94,-127,-72,43,99,33,-33, 
  /* [6][0][][] */ -12,127,53,70,111,18,24,-118, 
  /* [7][0][][] */ 127,1,-26,60,39,-19,72,67, 
  /* [8][0][][] */ 61,127,67,100,116,103,108,-76, 
  /* [9][0][][] */ 65,120,-127,-58,58,104,42,65, 
  /* [10][0][][] */ -72,-50,24,-54,-31,-37,-59,127, 
  /* [11][0][][] */ 7,-98,-127,-1,5,-2,21,-23, 
  /* [12][0][][] */ 2,-99,-127,5,-116,19,-106,32, 
  /* [13][0][][] */ -10,5,-103,89,-127,-32,-13,-11, 
  /* [14][0][][] */ -47,-36,-127,-11,27,-18,-23,-51, 
  /* [15][0][][] */ 19,-91,-127,40,-90,0,-43,-1, 
  /* [16][0][][] */ 127,-59,-14,75,-81,24,32,87, 
  /* [17][0][][] */ 7,127,116,-67,-57,-31,-27,-31, 
  /* [18][0][][] */ -13,-127,54,80,4,-60,59,-109, 
  /* [19][0][][] */ 127,-49,-56,29,-67,-13,26,97, 
  /* [20][0][][] */ -26,-127,70,61,-15,-83,2,-65, 
  /* [21][0][][] */ 5,-73,-31,-46,127,-15,44,3, 
  /* [22][0][][] */ -127,43,-84,59,58,36,-113,-127, 
  /* [23][0][][] */ -70,-48,51,-4,-65,127,116,-48, 
  /* [24][0][][] */ -47,54,-3,-46,-35,117,127,-18, 
  /* [25][0][][] */ -33,-65,-127,-56,-63,-15,-30,-61, 
  /* [26][0][][] */ -6,54,-14,127,-91,55,-56,6, 
  /* [27][0][][] */ 26,-127,28,82,19,-51,16,-116, 
  /* [28][0][][] */ -18,127,52,40,103,-23,-5,-49, 
  /* [29][0][][] */ 89,-26,-89,3,127,-98,-73,22, 
  /* [30][0][][] */ 19,-3,35,-127,13,-19,19,-32, 
  /* [31][0][][] */ 50,-27,9,74,-9,35,24,127, 
  /* [32][0][][] */ -94,-48,23,-45,-56,127,55,96, 
  /* [33][0][][] */ -43,54,75,-33,10,127,-102,78, 
  /* [34][0][][] */ 13,127,-74,-68,-3,39,-46,42, 
  /* [35][0][][] */ 20,-127,52,84,-22,-87,63,-102, 
  /* [36][0][][] */ -16,-44,-94,-7,-127,-60,-15,7, 
  /* [37][0][][] */ -40,-127,59,79,-1,-74,8,-69, 
  /* [38][0][][] */ -88,51,86,-55,-127,-93,-75,109, 
  /* [39][0][][] */ 57,-127,70,40,-15,-81,-23,-75, 
  /* [40][0][][] */ 6,43,32,31,-127,0,-52,-5, 
  /* [41][0][][] */ 84,127,-108,-117,84,14,-2,23, 
  /* [42][0][][] */ -6,-65,-24,4,127,16,60,11, 
  /* [43][0][][] */ 127,8,63,3,-79,-17,85,83, 
  /* [44][0][][] */ 45,24,-34,24,73,-96,-127,10, 
  /* [45][0][][] */ 31,15,33,23,63,-127,6,-28, 
  /* [46][0][][] */ 57,-24,9,127,32,56,22,66, 
  /* [47][0][][] */ -66,-80,37,67,-37,2,127,-63, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0033959317952394485, 0.0016452284762635827, 0.00089957390446215868, 0.0035876079928129911, 0.0024298713542521, 0.0043249917216598988, 0.0015994996065273881, 0.0015204600058495998, 0.0015505579067394137, 0.0035071729216724634, 0.0039527169428765774, 0.0031535271555185318, 0.0004786029749084264, 0.0047797565348446369, 0.003107426455244422, 0.0006217299378477037, 0.0053225262090563774, 0.0029426752589643002, 0.0042728381231427193, 0.0025820476002991199, 0.003126571187749505, 0.0027491678483784199, 0.0057647516950964928, 0.00084936525672674179, 0.0016673251520842314, 0.002151889493688941, 0.0010307406773790717, 0.003812817856669426, 0.0018180152401328087, 0.0017580358544364572, 0.0081379348412156105, 0.0053811715915799141, 0.0041589606553316116, 0.0035281616728752851, 0.0048030978068709373, 0.0042946012690663338, 0.0025512168649584055, 0.0045092366635799408, 0.0030563496984541416, 0.0039533874951303005, 0.0027123268228024244, 0.0031789864879101515, 0.0021759853698313236, 0.0033303117379546165, 0.0026424718089401722, 0.0032858871854841709, 0.0040969941765069962, 0.0021749050356447697, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 5510, 14262, -6454, 6540, -2549, 6983, -11009, -15415, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00021684527746401727, 0.00011121840361738577, 0.00013873860007151961, 0.0001242661674041301, 0.00016783855971880257, 0.00014937583182472736, 0.00020148162730038166, 0.00012567939120344818, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -37,-1,33,11,-34,-10,14,8,-43,-9,-58,-55,-26,-51,-2,-37,42,-30,40,40,-15,31,-43,14,8,-33,46,-10,-5,-11,15,17,81,33,31,-127,19,2,-15,-29,3,-16,39,46,39,7,25,-2, 
  /* [1][0][][] */ -1,22,51,-32,-5,38,-43,-25,0,25,-15,-80,9,84,-14,67,-13,8,-18,-58,18,-71,-10,20,-66,-10,-7,-111,-27,-24,31,-64,48,73,-37,7,127,-15,9,40,-33,43,-78,-24,114,-24,-23,-29, 
  /* [2][0][][] */ -6,-15,-60,17,-8,44,18,3,-10,43,-6,40,71,-88,13,-51,36,-95,27,35,-29,45,-3,22,-16,67,-30,-62,6,11,8,-66,-36,-76,22,-17,91,23,-8,-66,2,28,76,32,127,14,19,25, 
  /* [3][0][][] */ -12,-5,-73,53,13,-30,-61,-96,9,-22,-24,0,14,24,34,81,-9,2,-23,5,17,-100,17,-54,-80,-15,127,-20,-31,7,-50,0,2,-82,10,-11,-9,-20,-20,78,-32,-35,12,19,44,12,-32,42, 
  /* [4][0][][] */ -22,-52,-9,14,28,-28,-14,-6,28,-30,52,-71,7,29,8,12,-14,-18,15,-16,-9,-47,2,-17,16,-6,39,48,36,18,-16,36,-9,0,2,5,-62,92,30,-29,19,-19,-15,-21,-73,7,127,11, 
  /* [5][0][][] */ 54,-14,8,12,24,-44,30,-127,32,-21,-4,107,-88,74,24,-62,-1,-95,-1,7,-33,62,-32,-36,-58,76,-24,-12,-32,47,-49,-49,37,59,33,-1,-49,-23,-51,-43,30,-25,-53,-8,-33,44,87,17, 
  /* [6][0][][] */ 43,-27,16,-8,-30,-19,-32,20,-50,0,-43,127,-45,-44,-6,62,9,46,14,29,28,-81,-29,29,6,33,-64,5,16,-43,20,33,5,-11,-18,0,16,21,3,-17,-9,-17,43,61,-6,-34,76,-10, 
  /* [7][0][][] */ -23,2,-1,58,19,28,-1,28,17,4,70,-6,104,109,59,53,41,38,-20,4,19,-26,-83,-31,18,-4,-33,58,25,-31,-42,-11,45,9,33,-100,-81,42,44,55,-32,30,81,127,-67,-18,-105,57, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0092159239575266838, 0.0047267819754779339, 0.0058963904157280922, 0.0052813119255006313, 0.0071331383660435677, 0.0063484725542366505, 0.0085629690438508987, 0.0053413738496601582, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 9678, 4851, 4082, -1092, 3433, -3682, 720, 39318, -4328, -1135, 8908, 65946, 2107, 4904, 129, 11492, 1778, 13707, -2756, 7926, 14131, -615, 4204, -4342, 8183, 2098, 1259, 13546, -329, -3832, -10735, 11322, 6115, 2566, -292, 4734, -8355, 4533, 270, 22167, -820, -1469, 5063, 2708, 2740, -2232, 6420, -1045, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.8640987339895219e-05, 8.6514533904846758e-05, 0.00014045262651052326, 0.00016738635895308107, 0.00066677021095529199, 0.00014308563550002873, 0.00011623795580817387, 6.7529930674936622e-05, 0.0001060617869370617, 6.9473055191338062e-05, 6.2297964177560061e-05, 4.503689706325531e-05, 0.00010065907554235309, 6.0388123529264703e-05, 0.00025844361516647041, 0.00020994986698497087, 0.00012659290223382413, 0.00032131496118381619, 0.00017974253569263965, 0.00011517483653733507, 0.00013071336434222758, 0.00027370059979148209, 0.00016702488937880844, 0.000248961296165362, 0.00016251602210104465, 4.7895598981995136e-05, 5.6532608141424134e-05, 7.804714550729841e-05, 0.00013537037011701614, 0.00092729920288547873, 0.00022619783703703433, 7.5413867307361215e-05, 0.00013604802370537072, 0.00013132627645973116, 0.00016171782044693828, 6.2290520872920752e-05, 7.6770404120907187e-05, 6.5180938690900803e-05, 0.00013684679288417101, 5.4153257224243134e-05, 0.00015507727221120149, 0.00011948733299504966, 7.8085868153721094e-05, 6.7046443291474134e-05, 8.9696601207833737e-05, 0.00036666516098193824, 4.9530146498000249e-05, 0.00016869342653080821, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -37,-62,-35,-29,127,-23,44,-35,-85,-76,-16,-45,110,22,58,-73,80,-46,22,-58,-91,92,-12,-9,-13,60,73,-19,79,-60,55,-63,-80,-77,35,80,37,87,120,-47,-127,-23,19,73,57,-127,106,106, -61,-127,-69,38,-114,115,58,-64,-36,51,69,-111,127,87,102,-58,-108,-84,47,-68,-61,74,-64,114,-60,127,90,-127,75,-38,-13,-115,-14,-71,68,102,98,103,116,-90,-110,-58,51,109,79,114,98,99, -32,-43,-87,92,-42,-28,13,-20,115,59,60,-84,17,56,-22,7,-116,-28,56,-31,-46,10,-36,-57,-71,25,24,-88,20,62,97,-105,-10,1,-14,42,78,57,36,-34,-4,114,45,43,34,33,38,-127, 
  /* [0][1][][] */ -86,-88,-32,-57,-120,-49,102,-100,-127,-127,98,-98,79,30,-124,-65,127,-127,-51,-74,-127,49,-27,-3,-28,47,107,-42,-105,-68,44,-40,-70,-127,-127,78,60,127,15,-51,50,-23,78,111,78,118,127,-121, -64,-119,-127,-80,-57,127,127,-127,79,67,127,-127,80,127,64,-127,55,-68,-127,-127,-50,127,-127,127,-111,115,127,-85,-127,127,-39,-127,-127,-120,42,127,127,107,-19,-127,87,-102,127,127,127,0,121,89, -56,-43,-124,127,100,-46,35,-28,101,26,27,-79,8,75,73,-59,-39,-6,-6,-55,-96,-8,-68,-36,-127,27,56,-90,-44,42,127,-85,-70,12,65,66,74,52,-14,-83,46,127,62,33,50,-55,29,50, 
  /* [0][2][][] */ -127,-19,12,22,-61,-23,13,-55,45,-35,28,-63,2,13,-77,-27,-118,-19,96,-33,-48,35,-28,-20,-26,60,72,-36,38,63,6,-14,-6,-82,-47,50,19,41,-68,-33,10,11,31,68,38,75,25,-84, -84,-34,-37,-61,102,50,32,-73,111,34,-37,-42,-4,53,-127,-60,38,17,41,-53,-25,66,-55,45,-53,86,87,-43,50,12,-42,-59,-46,-54,-57,65,36,32,-127,-80,19,-56,93,92,51,-106,41,-6, -14,-32,-63,-12,-6,-7,-8,-32,-23,14,-23,-11,-21,25,40,-23,29,33,1,-41,-52,21,-33,-59,-62,26,41,-19,17,-55,60,-51,-71,19,40,47,16,12,-49,-55,-2,46,19,36,25,-1,24,38, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0033422419801354408, 0.0036768675781786442, 0.0059692366048693657, 0.00711392005905509, 0.028337733820080757, 0.0060811392031610012, 0.0049401130527257919, 0.0028700218535959721, 0.0045076259411871433, 0.0029526047874242067, 0.0026476634666323662, 0.0019140681251883507, 0.0042780106887221336, 0.0025664952117949724, 0.010983853600919247, 0.0089228693395853043, 0.0053801983594894409, 0.013655885122716427, 0.0076390574686229229, 0.0048949304036796093, 0.0055553177371621132, 0.011632274836301804, 0.0070985574275255203, 0.010580855421721935, 0.006906930822879076, 0.0020355628803372383, 0.0024026357568800449, 0.0033170036040246487, 0.0057532405480742455, 0.039410214871168137, 0.009613407775759697, 0.0032050893642008305, 0.0057820407673716545, 0.0055813668295741081, 0.0068730069324374199, 0.0026473470497876406, 0.003262741956859827, 0.0027701898943632841, 0.0058159888722002506, 0.0023015134502202272, 0.0065907840617001057, 0.0050782114267349243, 0.0033186492510139942, 0.0028494738508015871, 0.0038121053948998451, 0.01558326929807663, 0.0021050311625003815, 0.0071694701910018921, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1419, -584, -565, 1661, 22140, 2435, -345, 4455, 1871, 1308, 628, 2902, 1614, 530, -1253, 1303, 3932, 10662, 3822, -905, 1449, -620, 251, 2860, -463, -502, 1417, -16, 2939, 14815, 2076, -337, 852, 71, 2097, 70, 285, -131, 1501, 1835, 1661, 2229, 334, -279, 372, 2290, 912, -341, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00035104251583106816, 0.00035172744537703693, 0.00025844908668659627, 0.00025267867022193968, 4.8938291001832113e-05, 0.00029066985007375479, 0.00060078641399741173, 0.00020204165775794536, 0.00026296079158782959, 0.00049156224122270942, 0.00031151747680269182, 0.00030040499405004084, 0.00019309013441670686, 0.00033652290585450828, 0.0002620564482640475, 0.00023698891163803637, 0.00020286836661398411, 8.8094238890334964e-05, 0.000224760064156726, 0.00035600119736045599, 0.00034609265276230872, 0.00019637084915302694, 0.00039192120311781764, 0.0002750675193965435, 0.0003715774801094085, 0.00082867167657241225, 0.00035522095276974142, 0.00089798803674057126, 0.00028046572697348893, 6.7878499976359308e-05, 0.00033607444493100047, 0.00054580724099650979, 0.00035263411700725555, 0.00033631539554335177, 0.00032791477860882878, 0.00034218525979667902, 0.00044825120130553842, 0.00049024843610823154, 0.00034652126487344503, 0.00037463716580532491, 0.00033999525476247072, 0.00029451309819705784, 0.00029283858020789921, 0.00042199075687676668, 0.00042298546759411693, 0.00023271370446309447, 0.00030379605595953763, 0.00031028653029352427, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -41,11,-7,-20,-106,-37,-127,27, 
  /* [1][0][][] */ 98,-72,-40,-58,127,-65,91,30, 
  /* [2][0][][] */ -83,118,-65,-127,48,-7,-34,44, 
  /* [3][0][][] */ 79,-22,117,22,83,121,127,-6, 
  /* [4][0][][] */ -83,-127,60,-4,-58,-104,2,-46, 
  /* [5][0][][] */ 127,-21,68,50,-75,-8,2,-21, 
  /* [6][0][][] */ 19,36,127,-32,46,-25,-34,23, 
  /* [7][0][][] */ 34,3,-127,-21,-42,90,96,-61, 
  /* [8][0][][] */ -24,127,-69,10,59,65,25,70, 
  /* [9][0][][] */ 5,114,-61,121,15,-74,17,127, 
  /* [10][0][][] */ 1,-127,1,-36,-71,-94,-66,-65, 
  /* [11][0][][] */ -127,-82,107,43,-15,-65,87,53, 
  /* [12][0][][] */ -30,47,-127,75,29,-40,-98,91, 
  /* [13][0][][] */ 77,-127,74,63,-3,31,29,-46, 
  /* [14][0][][] */ -51,88,-24,-127,-18,-89,-34,-64, 
  /* [15][0][][] */ 41,125,10,-12,29,-64,127,-115, 
  /* [16][0][][] */ -65,-127,-39,116,-17,51,8,101, 
  /* [17][0][][] */ -15,-96,-127,78,-78,62,-49,83, 
  /* [18][0][][] */ -78,-77,-48,67,4,68,-12,127, 
  /* [19][0][][] */ 64,-127,66,-102,13,-46,35,-14, 
  /* [20][0][][] */ -9,89,43,12,63,127,45,-9, 
  /* [21][0][][] */ 18,111,45,-37,46,-69,89,-127, 
  /* [22][0][][] */ 29,23,107,8,-1,127,45,-44, 
  /* [23][0][][] */ -84,-58,26,-71,81,109,-40,-127, 
  /* [24][0][][] */ -109,-96,34,-88,99,121,-51,-127, 
  /* [25][0][][] */ 127,14,-55,-18,20,29,-55,-11, 
  /* [26][0][][] */ -127,-31,-116,-23,-56,-39,9,6, 
  /* [27][0][][] */ 77,34,-3,-42,-127,-20,85,96, 
  /* [28][0][][] */ -127,-60,17,28,-57,-104,-7,-9, 
  /* [29][0][][] */ 91,83,42,-127,41,16,-34,-85, 
  /* [30][0][][] */ -67,-60,12,-63,50,75,-30,-127, 
  /* [31][0][][] */ 59,30,-9,127,-9,-60,12,-2, 
  /* [32][0][][] */ -24,127,1,38,33,64,-1,46, 
  /* [33][0][][] */ -42,127,-77,25,25,-41,-22,-4, 
  /* [34][0][][] */ -75,-99,-32,127,15,21,21,79, 
  /* [35][0][][] */ -50,127,-37,-1,65,107,57,69, 
  /* [36][0][][] */ 67,31,-4,-46,-127,-31,102,100, 
  /* [37][0][][] */ -66,122,34,22,-127,116,-24,-119, 
  /* [38][0][][] */ 8,32,27,-10,127,65,101,56, 
  /* [39][0][][] */ -17,-82,46,-14,10,57,-109,127, 
  /* [40][0][][] */ -66,-16,-63,127,-10,12,13,90, 
  /* [41][0][][] */ 112,39,61,127,-58,-20,-31,2, 
  /* [42][0][][] */ -36,1,-66,-127,50,-100,2,67, 
  /* [43][0][][] */ 31,-14,89,5,36,127,91,6, 
  /* [44][0][][] */ -17,-23,-47,127,43,10,-35,-40, 
  /* [45][0][][] */ 54,127,117,-95,64,-46,18,-117, 
  /* [46][0][][] */ -38,-118,-46,28,8,36,-61,127, 
  /* [47][0][][] */ 51,40,108,25,83,127,102,-7, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0038521138485521078, 0.0038596298545598984, 0.0028360534925013781, 0.002772732637822628, 0.00053701718570664525, 0.0031896231230348349, 0.0065926420502364635, 0.0022170746233314276, 0.0028855619020760059, 0.0053940867073833942, 0.0034183915704488754, 0.0032964502461254597, 0.0021188464015722275, 0.003692785045132041, 0.0028756381943821907, 0.0026005632244050503, 0.0022261464037001133, 0.00096668925834819674, 0.0024663717485964298, 0.0039065270684659481, 0.0037977972533553839, 0.0021548469085246325, 0.0043006902560591698, 0.0030184134375303984, 0.004077451303601265, 0.0090933078899979591, 0.0038979651872068644, 0.0098539404571056366, 0.0030776497442275286, 0.00074485479854047298, 0.0036878639366477728, 0.0059893359430134296, 0.0038695791736245155, 0.0036905079614371061, 0.0035983249545097351, 0.0037549200933426619, 0.0049188192933797836, 0.0053796698339283466, 0.0038025006651878357, 0.0041110264137387276, 0.003730888245627284, 0.0032317966688424349, 0.0032134214416146278, 0.0046306541189551353, 0.0046415692195296288, 0.0025536499451845884, 0.0033336617052555084, 0.0034048841334879398, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7307, -2036, 13677, -11660, 22551, 8056, -8444, 10483, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00016654275532346219, 0.00021148883388377726, 0.00014937436208128929, 0.0002309052215423435, 0.00017430899606551975, 0.00017035614291671664, 0.00013977651542518288, 0.00025641327374614775, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -17,-5,-27,-71,-26,-36,16,-19,36,11,-25,-4,108,127,-19,-86, 
  /* [1][0][][] */ 127,-53,-51,19,-57,74,-72,-40,-40,88,-39,-50,-19,3,-61,-10, 
  /* [2][0][][] */ -41,-98,40,52,49,-76,-81,-20,31,-109,30,-127,40,-28,-71,30, 
  /* [3][0][][] */ 43,-7,15,16,-9,76,-52,-25,127,37,4,8,15,-8,3,20, 
  /* [4][0][][] */ -94,-32,-30,-127,-11,40,53,-115,29,-24,-44,-33,-113,31,-33,-20, 
  /* [5][0][][] */ 75,57,68,-30,52,-35,-121,-127,-10,-69,53,47,-41,61,54,-39, 
  /* [6][0][][] */ 100,49,-126,-73,38,-79,18,-94,-36,34,-127,98,93,-94,21,84, 
  /* [7][0][][] */ -127,-9,105,-33,-55,5,2,-61,-46,63,86,-31,66,-22,15,21, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0070780669339001179, 0.0089882751926779747, 0.0063484101556241512, 0.0098134716972708702, 0.0074081323109567165, 0.0072401361539959908, 0.0059405015781521797, 0.010897563770413399, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 27332, -1590, 4, 3042, -808, 380, 8024, 1459, 61, 303, -2294, 4220, 410, -1027, -219, -1655, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 8.0374091339763254e-05, 0.00017621333245187998, 0.00019984591926913708, 0.00020417477935552597, 0.0011879389639943838, 0.00097177480347454548, 0.00021494641259778291, 0.00086530053522437811, 0.00028683367418125272, 0.0012615823652595282, 0.00018867211474571377, 0.00015047256601974368, 0.00010793521505547687, 0.00025564793031662703, 0.00017047059372998774, 0.0004498405905906111, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 5,12,18,9,-20,11,0,17,0,-11,1,-1,4,-4,-7,3, -3,-3,16,4,14,-2,7,-27,-9,9,-4,106,-4,26,4,2, 3,-19,-3,10,6,-13,-2,13,-2,1,-1,-24,-1,-4,-10,1, 
  /* [0][1][][] */ 7,-11,2,12,127,-23,-127,-21,127,127,9,10,104,-22,2,-16, -127,127,127,1,-88,-91,-10,-104,15,-106,127,127,127,127,127,127, 17,-2,-17,-1,-9,127,12,-9,-1,-13,4,-11,12,-5,-4,-8, 
  /* [0][2][][] */ 0,12,9,-20,-23,15,57,6,-9,-8,-1,6,5,2,-1,-10, 18,-16,-12,-127,3,-16,-11,127,-4,1,-5,-15,-14,-56,-18,-36, -4,7,0,-1,2,-5,5,-1,0,1,-1,11,8,-6,-17,-12, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0034158988855779171, 0.0074890665709972382, 0.008493451401591301, 0.0086774276569485664, 0.050487402826547623, 0.041300427168607712, 0.0091352220624685287, 0.036775272339582443, 0.012190431356430054, 0.053617250174283981, 0.0080185644328594208, 0.0063950838521122932, 0.0045872465707361698, 0.010865037329494953, 0.0072449999861419201, 0.019118225201964378, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -95, -908, 326, 1381, 60988, 64574, 5475, 14744, 4563, 9129, 1207, -453, 4045, 2896, -400, 26025, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00025750137865543365, 0.0010396764846518636, 0.00032459665089845657, 0.00017319209291599691, 2.3307842639042065e-05, 2.3042404791340232e-05, 0.00013396074064075947, 3.2854342862265185e-05, 0.00019560458895284683, 3.7871050153626129e-05, 0.00046350984484888613, 0.0010085594840347767, 0.00035456981277093291, 2.090645648422651e-05, 0.00081276585115119815, 4.933546733809635e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -85, -107, -29, 
  /* [0][1][][] */ 66, -34, 18, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 109, -93, -11, 
  /* [1][1][][] */ -127, 108, 24, 
  /* [1][2][][] */ 15, 0, -12, 
  /* [2][0][][] */ -23, -1, -49, 
  /* [2][1][][] */ 36, 97, 127, 
  /* [2][2][][] */ -13, -96, -82, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 2, -21, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 5, -62, -1, 
  /* [4][1][][] */ 13, -127, -14, 
  /* [4][2][][] */ -1, -90, -25, 
  /* [5][0][][] */ -96, 16, -9, 
  /* [5][1][][] */ -127, 20, -11, 
  /* [5][2][][] */ -90, 8, -18, 
  /* [6][0][][] */ -17, 81, 127, 
  /* [6][1][][] */ -50, 58, -15, 
  /* [6][2][][] */ -36, -51, -89, 
  /* [7][0][][] */ 24, 7, -35, 
  /* [7][1][][] */ 127, 66, -14, 
  /* [7][2][][] */ 35, 19, -12, 
  /* [8][0][][] */ -21, -30, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -26, -60, 96, 
  /* [9][0][][] */ -27, 66, -8, 
  /* [9][1][][] */ -18, 127, -18, 
  /* [9][2][][] */ 1, 102, -2, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 11, 39, 16, 
  /* [11][0][][] */ 6, -18, 10, 
  /* [11][1][][] */ 64, -91, 36, 
  /* [11][2][][] */ -85, 127, -44, 
  /* [12][0][][] */ -41, 49, -9, 
  /* [12][1][][] */ -127, 115, 7, 
  /* [12][2][][] */ -78, 80, 6, 
  /* [13][0][][] */ 107, 27, -22, 
  /* [13][1][][] */ 127, 61, -33, 
  /* [13][2][][] */ 113, 110, 39, 
  /* [14][0][][] */ -29, -26, 47, 
  /* [14][1][][] */ 46, 101, -127, 
  /* [14][2][][] */ -16, -69, 80, 
  /* [15][0][][] */ -78, -30, 21, 
  /* [15][1][][] */ -127, -118, 21, 
  /* [15][2][][] */ -33, -71, -4, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.065662845969200134, 0.26511749625205994, 0.082772143185138702, 0.044163979589939117, 0.0059434995055198669, 0.0058758128434419632, 0.034159988164901733, 0.0083778565749526024, 0.049879167228937149, 0.0096571175381541252, 0.11819500476121902, 0.25718265771865845, 0.090415298938751221, 0.005331146065145731, 0.20725527405738831, 0.012580543756484985, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.091129839420318604, } };
const TfArray<1, int> quant46_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.062473855912685394, } };
const TfArray<1, int> quant50_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.068541757762432098, } };
const TfArray<1, int> quant53_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.093703038990497589, } };
const TfArray<1, int> quant54_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,31,31,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.056757088750600815, } };
const TfArray<1, int> quant58_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.0558478944003582, } };
const TfArray<1, int> quant61_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.063471488654613495, } };
const TfArray<1, int> quant62_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.07616201788187027, } };
const TfArray<1, int> quant65_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.13258260488510132, } };
const TfArray<1, int> quant66_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,15,15,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.099653266370296478, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,15,15,13 } };
const TfArray<1, float> quant69_scale = { 1, { 0.25113597512245178, } };
const TfArray<1, int> quant69_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,15,15,13 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 52, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension44, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension46, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension47, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension49, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension50, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension51, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension53, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension55, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 46128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension57, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 56928, (TfLiteIntArray*)&tensor_dimension58, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension59, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension61, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension62, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension63, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25200, (TfLiteIntArray*)&tensor_dimension65, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension66, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension68, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2928, (TfLiteIntArray*)&tensor_dimension69, 2925, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 2925, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
